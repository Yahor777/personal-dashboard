// üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞ OLX (—Ç–æ—á—å-–≤-—Ç–æ—á—å –∫–∞–∫ –Ω–∞ OLX)

export interface OLXCategory {
  id: string;
  name: string;
  olxId: string; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ OLX
  subcategories?: OLXCategory[];
}

export interface City {
  id: string;
  name: string;
  slug: string;
  region: string;
}

// üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ OLX (–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Üí –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö)
export const OLX_CATEGORIES: OLXCategory[] = [
  {
    id: 'all',
    name: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    olxId: '',
  },
  {
    id: 'electronics',
    name: 'üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    olxId: '5',
    subcategories: [
      {
        id: 'computers',
        name: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã',
        olxId: '733',
        subcategories: [
          { id: 'pc-components', name: '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö', olxId: '238' },
          { id: 'laptops', name: '–ù–æ—É—Ç–±—É–∫–∏', olxId: '244' },
          { id: 'monitors', name: '–ú–æ–Ω–∏—Ç–æ—Ä—ã', olxId: '246' },
          { id: 'peripherals', name: '–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è', olxId: '285' },
        ],
      },
      {
        id: 'phones-tablets',
        name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã',
        olxId: '1429',
        subcategories: [
          { id: 'phones', name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã', olxId: '1437' },
          { id: 'tablets', name: '–ü–ª–∞–Ω—à–µ—Ç—ã', olxId: '1439' },
          { id: 'accessories', name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', olxId: '1442' },
        ],
      },
    ],
  },
  {
    id: 'home-garden',
    name: 'üè† –î–æ–º –∏ —Å–∞–¥',
    olxId: '36',
  },
  {
    id: 'fashion',
    name: 'üëî –ú–æ–¥–∞',
    olxId: '3',
  },
];

// üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –ü–æ–ª—å—à–∏ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
export const POLISH_CITIES: City[] = [
  { id: 'all', name: '–í—Å—è –ü–æ–ª—å—à–∞', slug: '', region: 'all' },
  
  // –ú–∞–∑–æ–≤–µ—Ü–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'warszawa', name: 'Warszawa', slug: 'warszawa', region: 'mazowieckie' },
  { id: 'radom', name: 'Radom', slug: 'radom', region: 'mazowieckie' },
  { id: 'plock', name: 'P≈Çock', slug: 'plock', region: 'mazowieckie' },
  
  // –ú–∞–ª–æ–ø–æ–ª—å—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'krakow', name: 'Krak√≥w', slug: 'krakow', region: 'malopolskie' },
  { id: 'tarnow', name: 'Tarn√≥w', slug: 'tarnow', region: 'malopolskie' },
  { id: 'nowy-sacz', name: 'Nowy SƒÖcz', slug: 'nowy-sacz', region: 'malopolskie' },
  
  // –°–∏–ª–µ–∑—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'katowice', name: 'Katowice', slug: 'katowice', region: 'slaskie' },
  { id: 'gliwice', name: 'Gliwice', slug: 'gliwice', region: 'slaskie' },
  { id: 'sosnowiec', name: 'Sosnowiec', slug: 'sosnowiec', region: 'slaskie' },
  { id: 'bielsko-biala', name: 'Bielsko-Bia≈Ça', slug: 'bielsko-biala', region: 'slaskie' },
  
  // –í–µ–ª–∏–∫–æ–ø–æ–ª—å—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'poznan', name: 'Pozna≈Ñ', slug: 'poznan', region: 'wielkopolskie' },
  { id: 'kalisz', name: 'Kalisz', slug: 'kalisz', region: 'wielkopolskie' },
  
  // –ù–∏–∂–Ω–µ—Å–∏–ª–µ–∑—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'wroclaw', name: 'Wroc≈Çaw', slug: 'wroclaw', region: 'dolnoslaskie' },
  { id: 'walbrzych', name: 'Wa≈Çbrzych', slug: 'walbrzych', region: 'dolnoslaskie' },
  { id: 'legnica', name: 'Legnica', slug: 'legnica', region: 'dolnoslaskie' },
  
  // –ü–æ–º–æ—Ä—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'gdansk', name: 'Gda≈Ñsk', slug: 'gdansk', region: 'pomorskie' },
  { id: 'gdynia', name: 'Gdynia', slug: 'gdynia', region: 'pomorskie' },
  { id: 'slupsk', name: 'S≈Çupsk', slug: 'slupsk', region: 'pomorskie' },
  
  // –õ–æ–¥–∑–∏–Ω—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'lodz', name: '≈Å√≥d≈∫', slug: 'lodz', region: 'lodzkie' },
  { id: 'piotrkow-trybunalski', name: 'Piotrk√≥w Trybunalski', slug: 'piotrkow-trybunalski', region: 'lodzkie' },
  
  // –ó–∞–ø–∞–¥–Ω–æ-–ü–æ–º–æ—Ä—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'szczecin', name: 'Szczecin', slug: 'szczecin', region: 'zachodniopomorskie' },
  { id: 'koszalin', name: 'Koszalin', slug: 'koszalin', region: 'zachodniopomorskie' },
  
  // –õ—é–±–ª–∏–Ω—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'lublin', name: 'Lublin', slug: 'lublin', region: 'lubelskie' },
  { id: 'zamosc', name: 'Zamo≈õƒá', slug: 'zamosc', region: 'lubelskie' },
  
  // –ü–æ–¥–∫–∞—Ä–ø–∞—Ç—Å–∫–æ–µ –≤–æ–µ–≤–æ–¥—Å—Ç–≤–æ
  { id: 'rzeszow', name: 'Rzesz√≥w', slug: 'rzeszow', region: 'podkarpackie' },
  { id: 'przemysl', name: 'Przemy≈õl', slug: 'przemysl', region: 'podkarpackie' },
  
  // –î—Ä—É–≥–∏–µ
  { id: 'bydgoszcz', name: 'Bydgoszcz', slug: 'bydgoszcz', region: 'kujawsko-pomorskie' },
  { id: 'torun', name: 'Toru≈Ñ', slug: 'torun', region: 'kujawsko-pomorskie' },
  { id: 'bialystok', name: 'Bia≈Çystok', slug: 'bialystok', region: 'podlaskie' },
  { id: 'olsztyn', name: 'Olsztyn', slug: 'olsztyn', region: 'warminsko-mazurskie' },
  { id: 'kielce', name: 'Kielce', slug: 'kielce', region: 'swietokrzyskie' },
  { id: 'opole', name: 'Opole', slug: 'opole', region: 'opolskie' },
  { id: 'zielona-gora', name: 'Zielona G√≥ra', slug: 'zielona-gora', region: 'lubuskie' },
];

// üè∑Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export const ITEM_CONDITIONS = [
  { id: 'all', name: '–õ—é–±–æ–µ' },
  { id: 'new', name: '–ù–æ–≤–æ–µ', olxValue: 'new' },
  { id: 'used', name: '–ë/–£', olxValue: 'used' },
];

// üë§ –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞
export const SELLER_TYPES = [
  { id: 'all', name: '–í—Å–µ' },
  { id: 'private', name: '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' },
  { id: 'business', name: '–ë–∏–∑–Ω–µ—Å' },
];

// üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
export const DATE_FILTERS = [
  { id: 'all', name: '–õ—é–±–∞—è –¥–∞—Ç–∞' },
  { id: 'today', name: '–°–µ–≥–æ–¥–Ω—è', days: 1 },
  { id: 'week', name: '–ó–∞ –Ω–µ–¥–µ–ª—é', days: 7 },
  { id: 'month', name: '–ó–∞ –º–µ—Å—è—Ü', days: 30 },
];

// üîΩ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
export const SORT_OPTIONS = [
  { id: 'date_desc', name: '–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ' },
  { id: 'date_asc', name: '–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ' },
  { id: 'price_asc', name: '–°–Ω–∞—á–∞–ª–∞ –¥–µ—à—ë–≤—ã–µ' },
  { id: 'price_desc', name: '–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ' },
  { id: 'relevance', name: '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏' },
  { id: 'popular', name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ' },
];

// üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã (–¥–ª—è PC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
export const PC_BRANDS = [
  { id: 'all', name: '–í—Å–µ –±—Ä–µ–Ω–¥—ã' },
  { id: 'nvidia', name: 'NVIDIA' },
  { id: 'amd', name: 'AMD' },
  { id: 'intel', name: 'Intel' },
  { id: 'msi', name: 'MSI' },
  { id: 'asus', name: 'ASUS' },
  { id: 'gigabyte', name: 'Gigabyte' },
  { id: 'corsair', name: 'Corsair' },
  { id: 'kingston', name: 'Kingston' },
  { id: 'samsung', name: 'Samsung' },
  { id: 'gskill', name: 'G.Skill' },
];

// üí∞ –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã (–¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –ü–ö)
export const PRICE_PRESETS = [
  { id: 'any', name: '–õ—é–±–∞—è', min: null, max: null },
  { id: 'budget', name: '–î–æ 500 z≈Ç', min: null, max: 500 },
  { id: 'mid', name: '500-1500 z≈Ç', min: 500, max: 1500 },
  { id: 'high', name: '1500-3000 z≈Ç', min: 1500, max: 3000 },
  { id: 'premium', name: '–û—Ç 3000 z≈Ç', min: 3000, max: null },
];

// üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è OLX URL
export function buildOLXUrl(params: {
  query: string;
  category?: string;
  city?: string;
  minPrice?: number;
  maxPrice?: number;
  condition?: string;
}): string {
  const { query, category, city, minPrice, maxPrice, condition } = params;
  
  // –ë–∞–∑–æ–≤—ã–π URL
  let url = 'https://www.olx.pl';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
  if (city && city !== 'all') {
    const cityData = POLISH_CITIES.find(c => c.id === city);
    if (cityData && cityData.slug) {
      url += `/${cityData.slug}`;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
  if (category && category !== 'all') {
    const cat = findCategoryById(category);
    if (cat && cat.olxId) {
      url += `/elektronika`;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  url += `/d/oferty/q-${encodeURIComponent(query)}`;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
  const urlParams = new URLSearchParams();
  
  // –§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã
  if (minPrice) urlParams.append('search[filter_float_price:from]', minPrice.toString());
  if (maxPrice) urlParams.append('search[filter_float_price:to]', maxPrice.toString());
  
  // –§–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (condition && condition !== 'all') {
    const cond = ITEM_CONDITIONS.find(c => c.id === condition);
    if (cond && cond.olxValue) {
      urlParams.append('search[filter_enum_condition][0]', cond.olxValue);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
  const paramString = urlParams.toString();
  if (paramString) {
    url += `?${paramString}`;
  }
  
  return url;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
function findCategoryById(id: string, categories: OLXCategory[] = OLX_CATEGORIES): OLXCategory | null {
  for (const cat of categories) {
    if (cat.id === id) return cat;
    if (cat.subcategories) {
      const found = findCategoryById(id, cat.subcategories);
      if (found) return found;
    }
  }
  return null;
}
