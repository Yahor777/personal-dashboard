import { useState, useRef, useEffect } from 'react';
import { X, Send, Sparkles, Trash2, Plus, Zap } from 'lucide-react';
import { useStore } from '../store/useStore';
import { useTranslation } from '../data/translations';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { ScrollArea } from './ui/scroll-area';
import { Badge } from './ui/badge';
import type { AIMessage } from '../types';

interface AIAssistantPanelProps {
  onClose: () => void;
}

// Quick action templates
const quickActions = [
  { icon: 'üìù', label: '–†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞', prompt: '–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:' },
  { icon: '‚úèÔ∏è', label: '–£–ø—Ä–æ—Å—Ç–∏—Ç—å', prompt: '–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ:' },
  { icon: 'üé¥', label: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', prompt: '–°–æ–∑–¥–∞–π flashcards (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç) –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:' },
  { icon: 'üìã', label: '–ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è', prompt: '–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–π —Ç–µ–º—ã:' },
  { icon: 'üßÆ', label: '–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É', prompt: '–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É:' },
  { icon: 'üõí', label: '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', prompt: '–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:' },
  { icon: 'üè™', label: '–ê–Ω–∞–ª–∏–∑ OLX', prompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å OLX. –°—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å? –ö–∞–∫–∏–µ –µ—Å—Ç—å —Ä–∏—Å–∫–∏?' },
  { icon: 'üí∞', label: '–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã', prompt: '–û—Ü–µ–Ω–∏, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ –ª–∏ —ç—Ç–∞ —Ü–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ü–ö:' },
];

export function AIAssistantPanel({ onClose }: AIAssistantPanelProps) {
  const { workspace, aiConversations, currentConversationId, addAIMessage, createAIConversation, deleteAIConversation, setCurrentConversation } = useStore();
  const { t } = useTranslation(workspace.settings.language);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);

  const currentConversation = aiConversations.find(c => c.id === currentConversationId);

  useEffect(() => {
    // Auto-scroll to bottom on new messages
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [currentConversation?.messages]);

  const handleSend = async () => {
    if (!input.trim()) return;

    // Create conversation if none exists
    let convId = currentConversationId;
    if (!convId) {
      convId = useStore.getState().createAIConversation('–ù–æ–≤—ã–π —á–∞—Ç');
    }

    const userMessage = input.trim();
    setInput('');
    setIsLoading(true);

    // Add user message
    useStore.getState().addAIMessage(convId!, {
      role: 'user',
      content: userMessage,
    });

    try {
      // Call AI API (mock for now - replace with actual Ollama/OpenRouter)
      const response = await callAI(userMessage, workspace.settings.aiProvider || 'local');
      
      // Add AI response
      useStore.getState().addAIMessage(convId!, {
        role: 'assistant',
        content: response,
      });
    } catch (error) {
      useStore.getState().addAIMessage(convId!, {
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickAction = (prompt: string) => {
    setInput(prompt + '\n\n');
  };

  const handleNewChat = () => {
    const newId = useStore.getState().createAIConversation('–ù–æ–≤—ã–π —á–∞—Ç');
    setCurrentConversation(newId);
  };

  return (
    <div className="fixed inset-y-0 right-0 z-50 flex w-full max-w-3xl flex-col border-l border-border bg-background shadow-2xl">
      {/* Header */}
      <div className="flex items-center justify-between border-b border-border p-4">
        <div className="flex items-center gap-2">
          <Sparkles className="size-5 text-primary" />
          <h2>{t('aiAssistant')}</h2>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={handleNewChat}>
            <Plus className="size-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="size-5" />
          </Button>
        </div>
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Conversations Sidebar */}
        <div className="w-64 border-r border-border bg-muted/30 p-2">
          <ScrollArea className="h-full">
            <div className="space-y-1">
              {aiConversations.map((conv) => (
                <button
                  key={conv.id}
                  onClick={() => setCurrentConversation(conv.id)}
                  className={`flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-accent ${
                    currentConversationId === conv.id ? 'bg-accent' : ''
                  }`}
                >
                  <div className="flex-1 truncate">
                    <div className="truncate">{conv.title}</div>
                    <p className="truncate text-muted-foreground">
                      {conv.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 w-6 p-0"
                    onClick={(e) => {
                      e.stopPropagation();
                      deleteAIConversation(conv.id);
                    }}
                  >
                    <Trash2 className="size-3" />
                  </Button>
                </button>
              ))}
              {aiConversations.length === 0 && (
                <div className="p-4 text-center text-muted-foreground">
                  <p>–ù–µ—Ç —á–∞—Ç–æ–≤</p>
                  <p className="mt-2">–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä</p>
                </div>
              )}
            </div>
          </ScrollArea>
        </div>

        {/* Chat Area */}
        <div className="flex flex-1 flex-col">
          {/* Quick Actions */}
          {!currentConversation || currentConversation.messages.length === 0 ? (
            <div className="p-6">
              <h3 className="mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="grid grid-cols-2 gap-3">
                {quickActions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickAction(action.prompt)}
                    className="flex items-center gap-3 rounded-lg border border-border bg-card p-4 text-left transition-all hover:border-primary hover:shadow-md"
                  >
                    <span className="text-2xl">{action.icon}</span>
                    <span className="flex-1">{action.label}</span>
                  </button>
                ))}
              </div>

              <div className="mt-6 rounded-lg bg-muted/50 p-4">
                <h4 className="mb-2 flex items-center gap-2">
                  <Zap className="size-4" />
                  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI
                </h4>
                <ul className="space-y-1 text-muted-foreground">
                  <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤</li>
                  <li>‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è flashcards –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</li>
                  <li>‚Ä¢ üè™ –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å OLX/Allegro</li>
                  <li>‚Ä¢ üí∞ –û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ü–ö</li>
                  <li>‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</li>
                  <li>‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è</li>
                  <li>‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</li>
                </ul>
              </div>

              {!workspace.settings.aiEnabled && (
                <div className="mt-4 rounded-lg bg-yellow-500/10 p-4 text-yellow-600">
                  <p>‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí AI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Ollama –∏–ª–∏ OpenRouter.</p>
                </div>
              )}
            </div>
          ) : (
            <>
              {/* Messages */}
              <ScrollArea className="flex-1 p-4" ref={scrollRef}>
                <div className="space-y-4">
                  {currentConversation.messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg p-4 ${
                          message.role === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        }`}
                      >
                        {message.role === 'assistant' && (
                          <Badge variant="secondary" className="mb-2">
                            <Sparkles className="mr-1 size-3" />
                            AI
                          </Badge>
                        )}
                        <p className="whitespace-pre-wrap">{message.content}</p>
                        <p
                          className={`mt-2 ${
                            message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'
                          }`}
                        >
                          {new Date(message.timestamp).toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit',
                          })}
                        </p>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="max-w-[80%] rounded-lg bg-muted p-4">
                        <div className="flex items-center gap-2">
                          <Sparkles className="size-4 animate-pulse" />
                          <span>AI –¥—É–º–∞–µ—Ç...</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>
            </>
          )}

          {/* Input */}
          <div className="border-t border-border p-4">
            <div className="flex gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSend();
                  }
                }}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)"
                className="flex-1"
                disabled={isLoading}
              />
              <Button onClick={handleSend} disabled={isLoading || !input.trim()}>
                <Send className="size-4" />
              </Button>
            </div>
            <p className="mt-2 text-muted-foreground">
              üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// Mock AI function - replace with actual API calls
async function callAI(prompt: string, provider: string): Promise<string> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1000));

  // Mock responses based on keywords
  if (prompt.toLowerCase().includes('—Ä–µ–∑—é–º–µ') || prompt.toLowerCase().includes('summary')) {
    return '–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:\n\n1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã\n2. –ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –≤—ã–¥–µ–ª–µ–Ω—ã\n3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Ollama –∏–ª–∏ OpenRouter –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
  }

  if (prompt.toLowerCase().includes('flashcard') || prompt.toLowerCase().includes('–∫–∞—Ä—Ç–æ—á–∫')) {
    return '**Flashcards —Å–æ–∑–¥–∞–Ω—ã:**\n\nQ: –í–æ–ø—Ä–æ—Å 1?\nA: –û—Ç–≤–µ—Ç 1\n\nQ: –í–æ–ø—Ä–æ—Å 2?\nA: –û—Ç–≤–µ—Ç 2\n\n–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ AI –º–æ–¥–µ–ª—å.';
  }

  if (prompt.toLowerCase().includes('olx') || prompt.toLowerCase().includes('allegro')) {
    return '**–ê–Ω–∞–ª–∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**\n\n‚úÖ –ü–ª—é—Å—ã: —Ö–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ\n‚ö†Ô∏è –ú–∏–Ω—É—Å—ã: –Ω–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏\nüí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ü–µ–Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è\n\n–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ AI.';
  }

  return `–ü–æ–ª—É—á–µ–Ω –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI –ø–æ–¥–∫–ª—é—á–∏—Ç–µ:\n\n‚Ä¢ **Ollama** (–ª–æ–∫–∞–ª—å–Ω–æ) - —Å–∫–∞—á–∞–π—Ç–µ —Å ollama.ai\n‚Ä¢ **OpenRouter** - –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ openrouter.ai\n\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —è —Å–º–æ–≥—É:\n- –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã\n- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å flashcards\n- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã\n- –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏\n- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!`;
}
