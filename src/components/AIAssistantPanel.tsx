import { useState, useRef, useEffect } from 'react';
import { X, Send, Sparkles, Trash2, Plus, Zap, Copy, Check, Settings2, Paperclip, FileText, Image as ImageIcon } from 'lucide-react';
import { useStore } from '../store/useStore';
import { useTranslation } from '../data/translations';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { ScrollArea } from './ui/scroll-area';
import { Badge } from './ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { AIService } from '../services/aiService';
// AI Models configuration
const FREE_AI_MODELS: Array<{
  model: string;
  name: string;
  speed: string;
  supportsFiles: boolean;
}> = [
  {
    model: 'google/gemini-2.0-flash-exp:free',
    name: 'Gemini 2.0 Flash',
    speed: '–ë—ã—Å—Ç—Ä–∞—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤',
    supportsFiles: true,
  },
  {
    model: 'meta-llama/llama-3.2-3b-instruct:free',
    name: 'Llama 3.2 3B',
    speed: '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è',
    supportsFiles: false,
  },
  {
    model: 'meta-llama/llama-3.1-8b-instruct:free',
    name: 'Llama 3.1 8B',
    speed: '–ë—ã—Å—Ç—Ä–∞—è',
    supportsFiles: false,
  },
  {
    model: 'mistralai/mistral-7b-instruct:free',
    name: 'Mistral 7B',
    speed: '–ë—ã—Å—Ç—Ä–∞—è',
    supportsFiles: false,
  },
  {
    model: 'microsoft/phi-3-mini-128k-instruct:free',
    name: 'Phi-3 Mini',
    speed: '–ë—ã—Å—Ç—Ä–∞—è',
    supportsFiles: false,
  },
];

type AIModel = typeof FREE_AI_MODELS[number];
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeHighlight from 'rehype-highlight';
import 'highlight.js/styles/github-dark.css';
import { toast } from 'sonner';
import type { AIMessage } from '../types';

interface AIAssistantPanelProps {
  onClose: () => void;
}

// Quick action templates
const quickActions = [
  { icon: 'üìù', label: '–†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞', prompt: '–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:' },
  { icon: '‚úèÔ∏è', label: '–£–ø—Ä–æ—Å—Ç–∏—Ç—å', prompt: '–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ:' },
  { icon: 'üé¥', label: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', prompt: '–°–æ–∑–¥–∞–π flashcards (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç) –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:' },
  { icon: 'üìã', label: '–ü–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è', prompt: '–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–π —Ç–µ–º—ã:' },
  { icon: 'üßÆ', label: '–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É', prompt: '–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É:' },
  { icon: 'üõí', label: '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', prompt: '–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:' },
  { icon: 'üè™', label: '–ê–Ω–∞–ª–∏–∑ OLX', prompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å OLX. –°—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å? –ö–∞–∫–∏–µ –µ—Å—Ç—å —Ä–∏—Å–∫–∏?' },
  { icon: 'üí∞', label: '–û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã', prompt: '–û—Ü–µ–Ω–∏, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ –ª–∏ —ç—Ç–∞ —Ü–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ü–ö:' },
];

export function AIAssistantPanel({ onClose }: AIAssistantPanelProps) {
  const { workspace, aiConversations, currentConversationId, addAIMessage, createAIConversation, deleteAIConversation, setCurrentConversation } = useStore();
  const { t } = useTranslation(workspace.settings.language);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [copiedMessageId, setCopiedMessageId] = useState<string | null>(null);
  const [attachedFiles, setAttachedFiles] = useState<Array<{name: string; size: number; type: string; preview?: string}>>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const scrollRef = useRef<HTMLDivElement>(null);

  const currentConversation = aiConversations.find(c => c.id === currentConversationId);
  const currentModel = FREE_AI_MODELS.find((m: AIModel) => m.model === workspace.settings.aiModel);
  const supportsFiles = currentModel?.supportsFiles || false;

  useEffect(() => {
    // Auto-scroll to bottom on new messages
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [currentConversation?.messages]);

  const handleSend = async () => {
    if (!input.trim()) return;

    // Create conversation if none exists
    let convId = currentConversationId;
    if (!convId) {
      convId = useStore.getState().createAIConversation('–ù–æ–≤—ã–π —á–∞—Ç');
    }

    const userMessage = input.trim();
    setInput('');
    setIsLoading(true);

    // Build message content with files info
    let messageContent = userMessage;
    if (attachedFiles.length > 0) {
      messageContent += '\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n';
      attachedFiles.forEach(file => {
        messageContent += `- ${file.name} (${(file.size / 1024).toFixed(1)} KB)\n`;
      });
      messageContent += '\n(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ AI –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)';
    }

    // Add user message
    useStore.getState().addAIMessage(convId!, {
      role: 'user',
      content: messageContent,
    });

    // Clear attached files after sending
    setAttachedFiles([]);

    try {
      // Create AI service instance
      const aiService = new AIService({
        provider: workspace.settings.aiProvider || 'none',
        apiKey: workspace.settings.aiApiKey,
        model: workspace.settings.aiModel,
        ollamaUrl: workspace.settings.ollamaUrl,
      });

      // Get conversation history
      const currentConv = useStore.getState().aiConversations.find(c => c.id === convId);
      const messages = currentConv?.messages.map(m => ({
        role: m.role,
        content: m.content,
      })) || [];

      // Call AI
      const response = await aiService.chat(messages);
      
      // Add AI response
      useStore.getState().addAIMessage(convId!, {
        role: 'assistant',
        content: response.content,
      });
    } catch (error) {
      console.error('AI error:', error);
      
      // Determine error message
      let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.';
      
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }

      // Add error message
      useStore.getState().addAIMessage(convId!, {
        role: 'assistant',
        content: `‚ö†Ô∏è ${errorMessage}\n\nüí° –°–æ–≤–µ—Ç—ã:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –≤ Settings\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å`,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickAction = (prompt: string) => {
    setInput(prompt + '\n\n');
  };

  const handleNewChat = () => {
    const newId = useStore.getState().createAIConversation('–ù–æ–≤—ã–π —á–∞—Ç');
    setCurrentConversation(newId);
  };

  const handleCopyMessage = async (messageId: string, content: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopiedMessageId(messageId);
      toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
      
      // Reset copied state after 2 seconds
      setTimeout(() => {
        setCopiedMessageId(null);
      }, 2000);
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å');
    }
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length === 0) return;

    if (!supportsFiles) {
      toast.error('–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã', {
        description: '–í—ã–±–µ—Ä–∏—Ç–µ Gemini 2.0 Flash –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏',
      });
      return;
    }

    // Limit to 5 files total
    if (attachedFiles.length + files.length > 5) {
      toast.error('–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
      return;
    }

    // Process files
    const processedFiles: Array<{name: string; size: number; type: string; preview?: string}> = [];
    
    for (const file of files) {
      // Check size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toast.error(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π`, {
          description: '–ú–∞–∫—Å–∏–º—É–º 10 –ú–ë –Ω–∞ —Ñ–∞–π–ª',
        });
        continue;
      }

      const fileData: {name: string; size: number; type: string; preview?: string} = {
        name: file.name,
        size: file.size,
        type: file.type,
      };

      // Generate preview for images
      if (file.type.startsWith('image/')) {
        try {
          const preview = await new Promise<string>((resolve) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target?.result as string);
            reader.readAsDataURL(file);
          });
          fileData.preview = preview;
        } catch (error) {
          console.error('Failed to generate preview:', error);
        }
      }

      processedFiles.push(fileData);
    }

    if (processedFiles.length > 0) {
      setAttachedFiles([...attachedFiles, ...processedFiles]);
      toast.success(`–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: ${processedFiles.length} —Ñ–∞–π–ª(–æ–≤)`);
    }

    // Reset input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const removeFile = (index: number) => {
    setAttachedFiles(attachedFiles.filter((_, i) => i !== index));
  };

  return (
    <div className="fixed inset-y-0 right-0 z-50 flex w-full max-w-3xl flex-col border-l border-border bg-background shadow-2xl">
      {/* Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        accept="image/*,.pdf,.txt,.doc,.docx,.json,.md"
        className="hidden"
        onChange={handleFileSelect}
      />
      {/* Header */}
      <div className="flex items-center justify-between border-b border-border p-4">
        <div className="flex items-center gap-3">
          <Sparkles className="size-5 text-primary" />
          <h2>{t('aiAssistant')}</h2>
          <Badge variant="outline" className="text-xs">Ctrl+/</Badge>
          
          {/* Model Selector */}
          {workspace.settings.aiProvider === 'openrouter' && (
            <Select
              value={workspace.settings.aiModel || FREE_AI_MODELS[0].model}
              onValueChange={(model: string) => {
                useStore.getState().updateSettings({ aiModel: model });
                toast.success('–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞');
                
                // Clear files if new model doesn't support them
                const newModel = FREE_AI_MODELS.find((m: AIModel) => m.model === model);
                if (!newModel?.supportsFiles && attachedFiles.length > 0) {
                  setAttachedFiles([]);
                  toast.info('–§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã (–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã)');
                }
              }}
            >
              <SelectTrigger className="w-[220px] h-8 text-xs">
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" />
              </SelectTrigger>
              <SelectContent>
                {FREE_AI_MODELS.map((model: AIModel) => (
                  <SelectItem key={model.model} value={model.model} className="text-xs">
                    <div className="flex flex-col">
                      <span className="font-medium">{model.name}</span>
                      <span className="text-muted-foreground text-[10px]">{model.speed}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={handleNewChat}>
            <Plus className="size-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="size-5" />
          </Button>
        </div>
      </div>

      <div className="flex flex-1 overflow-hidden">
        {/* Conversations Sidebar */}
        <div className="w-64 border-r border-border bg-muted/30 p-2">
          <ScrollArea className="h-full">
            <div className="space-y-1">
              {aiConversations.map((conv) => (
                <button
                  key={conv.id}
                  onClick={() => setCurrentConversation(conv.id)}
                  className={`flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-accent ${
                    currentConversationId === conv.id ? 'bg-accent' : ''
                  }`}
                >
                  <div className="flex-1 truncate">
                    <div className="truncate">{conv.title}</div>
                    <p className="truncate text-muted-foreground">
                      {conv.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 w-6 p-0"
                    onClick={(e: React.MouseEvent) => {
                      e.stopPropagation();
                      deleteAIConversation(conv.id);
                    }}
                  >
                    <Trash2 className="size-3" />
                  </Button>
                </button>
              ))}
              {aiConversations.length === 0 && (
                <div className="p-4 text-center text-muted-foreground">
                  <p>–ù–µ—Ç —á–∞—Ç–æ–≤</p>
                  <p className="mt-2">–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä</p>
                </div>
              )}
            </div>
          </ScrollArea>
        </div>

        {/* Chat Area */}
        <div className="flex flex-1 flex-col overflow-hidden">
          {/* Quick Actions */}
          {!currentConversation || currentConversation.messages.length === 0 ? (
            <div className="p-6 overflow-y-auto">
              <h3 className="mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="grid grid-cols-2 gap-3">
                {quickActions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickAction(action.prompt)}
                    className="flex items-center gap-3 rounded-lg border border-border bg-card p-4 text-left transition-all hover:border-primary hover:shadow-md"
                  >
                    <span className="text-2xl">{action.icon}</span>
                    <span className="flex-1">{action.label}</span>
                  </button>
                ))}
              </div>

              <div className="mt-6 rounded-lg bg-muted/50 p-4">
                <h4 className="mb-2 flex items-center gap-2">
                  <Zap className="size-4" />
                  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI
                </h4>
                <ul className="space-y-1 text-muted-foreground">
                  <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤</li>
                  <li>‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è flashcards –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</li>
                  <li>‚Ä¢ üè™ –ê–Ω–∞–ª–∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å OLX/Allegro</li>
                  <li>‚Ä¢ üí∞ –û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ü–ö</li>
                  <li>‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏</li>
                  <li>‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è</li>
                  <li>‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –∏ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</li>
                </ul>
              </div>

              {!workspace.settings.aiProvider || workspace.settings.aiProvider === 'none' ? (
                <div className="mt-4 rounded-lg bg-yellow-500/10 p-4 text-yellow-600">
                  <p className="font-semibold mb-2">‚ö†Ô∏è AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</p>
                  <p className="text-sm">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí AI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</p>
                  <ul className="text-sm mt-2 space-y-1">
                    <li>‚Ä¢ <strong>OpenRouter</strong> - –¥–æ—Å—Ç—É–ø –∫ GPT-4, Claude –∏ –¥—Ä—É–≥–∏–º –º–æ–¥–µ–ª—è–º</li>
                    <li>‚Ä¢ <strong>OpenAI</strong> - –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ GPT –º–æ–¥–µ–ª—è–º</li>
                    <li>‚Ä¢ <strong>Ollama</strong> - –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (llama2, mistral –∏ –¥—Ä.)</li>
                  </ul>
                </div>
              ) : null}
            </div>
          ) : (
            <>
              {/* Messages */}
              <div className="flex-1 overflow-hidden">
                <ScrollArea className="h-full">
                  <div className="p-4 space-y-4" ref={scrollRef}>
                  {currentConversation.messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg p-4 ${
                          message.role === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        }`}
                      >
                        <div className="flex items-start justify-between gap-2">
                          <div className="flex-1">
                            {message.role === 'assistant' && (
                              <Badge variant="secondary" className="mb-2">
                                <Sparkles className="mr-1 size-3" />
                                AI
                              </Badge>
                            )}
                            {message.role === 'assistant' ? (
                              <div className="prose prose-sm dark:prose-invert max-w-none">
                                <ReactMarkdown 
                                  remarkPlugins={[remarkGfm]}
                                  rehypePlugins={[rehypeHighlight]}
                                  components={{
                                    // Custom styling for code blocks
                                    code: ({ className, children, ...props }: any) => {
                                      const match = /language-(\w+)/.exec(className || '');
                                      return !match ? (
                                        <code className="bg-muted px-1 py-0.5 rounded text-sm" {...props}>
                                          {children}
                                        </code>
                                      ) : (
                                        <code className={className} {...props}>
                                          {children}
                                        </code>
                                      );
                                    },
                                  }}
                                >
                                  {message.content}
                                </ReactMarkdown>
                              </div>
                            ) : (
                              <p className="whitespace-pre-wrap">{message.content}</p>
                            )}
                          </div>
                          {message.role === 'assistant' && (
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-7 w-7 shrink-0"
                              onClick={() => handleCopyMessage(message.id, message.content)}
                            >
                              {copiedMessageId === message.id ? (
                                <Check className="size-3 text-green-600" />
                              ) : (
                                <Copy className="size-3" />
                              )}
                            </Button>
                          )}
                        </div>
                        <p
                          className={`mt-2 ${
                            message.role === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground'
                          }`}
                        >
                          {new Date(message.timestamp).toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit',
                          })}
                        </p>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="max-w-[80%] rounded-lg bg-muted p-4">
                        <div className="flex items-center gap-2">
                          <Sparkles className="size-4 animate-pulse" />
                          <span>AI –¥—É–º–∞–µ—Ç...</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>
              </div>
            </>
          )}

          {/* Input */}
          <div className="border-t border-border p-4">
            {/* Attached files preview */}
            {attachedFiles.length > 0 && (
              <div className="mb-3 flex flex-wrap gap-2">
                {attachedFiles.map((file, index) => (
                  <div key={index} className="flex items-center gap-2 rounded-lg border border-border bg-muted px-3 py-2">
                    {file.preview ? (
                      <img src={file.preview} alt={file.name} className="size-8 rounded object-cover" />
                    ) : (
                      <FileText className="size-4" />
                    )}
                    <div className="flex flex-col">
                      <span className="text-xs font-medium">{file.name}</span>
                      <span className="text-[10px] text-muted-foreground">
                        {(file.size / 1024).toFixed(1)} KB
                      </span>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => removeFile(index)}
                    >
                      <X className="size-3" />
                    </Button>
                  </div>
                ))}
              </div>
            )}

            <div className="flex gap-2">
              <button
                type="button"
                className="shrink-0 flex items-center justify-center size-10 rounded-md bg-primary/20 hover:bg-primary/30 text-primary border-2 border-primary/50 transition-colors disabled:opacity-50"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  if (supportsFiles) {
                    fileInputRef.current?.click();
                  } else {
                    toast.warning('üìé –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', {
                      description: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤: Gemini 2.0 Flash –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.',
                      duration: 5000,
                    });
                  }
                }}
                title={supportsFiles 
                  ? '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é)' 
                  : '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏)'}
                disabled={isLoading}
              >
                <Paperclip className="size-5" />
              </button>
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSend();
                  }
                }}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)"
                className="flex-1"
                disabled={isLoading}
              />
              <Button onClick={handleSend} disabled={isLoading || !input.trim()}>
                <Send className="size-4" />
              </Button>
            </div>
            <p className="mt-2 text-xs text-muted-foreground">
              üí° Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ | üìé {supportsFiles 
                ? `–§–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (${attachedFiles.length}/5)` 
                : '–î–ª—è —Ñ–∞–π–ª–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ Gemini 2.0 Flash'}
              {attachedFiles.length > 0 && ` | ${attachedFiles.length} —Ñ–∞–π–ª(–æ–≤) –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ`}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}