import { useState, useEffect, type ReactNode } from 'react';
import { X, Search, MapPin, Tag, DollarSign, Eye, ExternalLink, Star, TrendingUp, Filter, Clock, Heart, Bookmark, History, Grid, List, ChevronLeft, ChevronRight, BarChart3, Download, Loader2, AlertCircle, RefreshCw, Share2, Award, ThumbsUp, ThumbsDown, Zap, AlertTriangle, Cpu, MonitorSmartphone, Gauge, Sparkles, Truck } from 'lucide-react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Badge } from './ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { ScrollArea, ScrollBar } from './ui/scroll-area';
import { Separator } from './ui/separator';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './ui/accordion';
import { toast } from 'sonner';
import { POLISH_CITIES, ITEM_CONDITIONS, PRICE_PRESETS, OLX_CATEGORIES, SELLER_TYPES, DATE_FILTERS, SORT_OPTIONS, PC_BRANDS, buildOLXUrl } from '../data/olxCategories';
import { filterOLXListings, type OLXListing } from '../data/mockOLXData';
import { analyzeOffer, getTopOffers, getOffersToAvoid, type AIRecommendation } from '../utils/aiAnalyzer';
import { savePreference, getPreferenceForListing, getPreferenceStats } from '../utils/userPreferences';

interface OLXMarketplaceProps {
  onClose: () => void;
}

type QuickSearchConfig = {
  id: string;
  title: string;
  description: string;
  icon: ReactNode;
  query: string;
  city?: string;
  minPrice?: number;
  maxPrice?: number;
  brand?: string;
  withDelivery?: boolean;
};

interface QuickFilterBlockProps {
  label: string;
  children: ReactNode;
  compact?: boolean;
}

const QuickFilterBlock = ({ label, children, compact = false }: QuickFilterBlockProps) => (
  <div className={`flex flex-col gap-1 ${compact ? 'min-w-[140px]' : ''}`}>
    <span className="text-[11px] uppercase tracking-wide text-muted-foreground/90">
      {label}
    </span>
    <div className="flex items-center gap-2">
      {children}
    </div>
  </div>
);

const QUICK_SEARCHES: QuickSearchConfig[] = [
  {
    id: 'gaming-budget',
    title: 'üéÆ –ë—é–¥–∂–µ—Ç–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ü–ö',
    description: 'RTX 3060 | Ryzen 5 | –¥–æ 3000 z≈Ç',
    icon: <MonitorSmartphone className="size-5 text-orange-500" />,
    query: 'RTX 3060',
    city: 'warszawa',
    maxPrice: 3000,
    withDelivery: true,
  },
  {
    id: 'productivity',
    title: 'üíº –ü–ö –¥–ª—è —Ä–∞–±–æ—Ç—ã',
    description: 'Ryzen 5 5600X | 32GB RAM',
    icon: <Cpu className="size-5 text-blue-500" />,
    query: 'Ryzen 5 5600X',
    city: 'krakow',
    minPrice: 400,
    maxPrice: 900,
    withDelivery: true,
  },
  {
    id: 'upgrade-ssd',
    title: '‚ö° SSD –∞–ø–≥—Ä–µ–π–¥',
    description: 'NVMe 1TB | –¥–æ—Å—Ç–∞–≤–∫–∞ OLX',
    icon: <Gauge className="size-5 text-green-500" />,
    query: 'NVMe 1TB',
    city: 'wroclaw',
    minPrice: 250,
    maxPrice: 450,
    withDelivery: true,
  },
  {
    id: 'rgb-build',
    title: '‚ú® RGB –±–∏–ª–¥—ã',
    description: 'NZXT H510 | RTX 3070 Ti',
    icon: <Sparkles className="size-5 text-purple-500" />,
    query: 'NZXT H510',
    city: 'poznan',
  },
];

export function OLXMarketplace({ onClose }: OLXMarketplaceProps) {
  // Check backend status on mount
  useEffect(() => {
    checkBackendStatus();
    loadUserPreferences();
  }, []);
  
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  const loadUserPreferences = () => {
    const prefs = new Map<string, 'like' | 'dislike'>();
    results.forEach(listing => {
      const pref = getPreferenceForListing(listing.id);
      if (pref !== 'neutral') {
        prefs.set(listing.id, pref);
      }
    });
    setUserPreferences(prefs);
    
    const stats = getPreferenceStats();
    console.log('[Preferences] Loaded:', stats);
  };

  const checkBackendStatus = async () => {
    setBackendStatus('checking');
    try {
      const response = await fetch('http://localhost:3002/health', {
        method: 'GET',
      });
      if (response.ok) {
        setBackendStatus('online');
        toast.success('Backend –ø–æ–¥–∫–ª—é—á–µ–Ω', { description: '–î–æ—Å—Ç—É–ø–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ OLX' });
      } else {
        setBackendStatus('offline');
      }
    } catch (error) {
      setBackendStatus('offline');
      toast.info('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { description: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock –¥–∞–Ω–Ω—ã–µ' });
    }
  };
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCity, setSelectedCity] = useState('all');
  const [selectedCategory, setSelectedCategory] = useState('pc-components');
  const [selectedCondition, setSelectedCondition] = useState('all');
  const [selectedSellerType, setSelectedSellerType] = useState('all');
  const [selectedDateFilter, setSelectedDateFilter] = useState('all');
  const [selectedSort, setSelectedSort] = useState('date_desc');
  const [withDelivery, setWithDelivery] = useState(false); // üöö –§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ OLX
  const [selectedBrand, setSelectedBrand] = useState('all');
  const [minPrice, setMinPrice] = useState('');
  const [maxPrice, setMaxPrice] = useState('');
  const [results, setResults] = useState<OLXListing[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [isDesktop, setIsDesktop] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [favorites, setFavorites] = useState<Set<string>>(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ localStorage
    const saved = localStorage.getItem('olx-favorites');
    return saved ? new Set(JSON.parse(saved)) : new Set();
  });
  const [savedSearches, setSavedSearches] = useState<Array<{name: string; params: any}>>(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –∏–∑ localStorage
    const saved = localStorage.getItem('olx-saved-searches');
    return saved ? JSON.parse(saved) : [];
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const [selectedListing, setSelectedListing] = useState<OLXListing | null>(null);
  const [showStats, setShowStats] = useState(false);
  const [backendStatus, setBackendStatus] = useState<'checking' | 'online' | 'offline'>('checking');
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [comparisonList, setComparisonList] = useState<Set<string>>(new Set());
  const [showAIRecommendations, setShowAIRecommendations] = useState(false);
  const [aiRecommendations, setAIRecommendations] = useState<Map<string, AIRecommendation>>(new Map());
  const [userPreferences, setUserPreferences] = useState<Map<string, 'like' | 'dislike'>>(new Map());
  const [showComparison, setShowComparison] = useState(false);

  useEffect(() => {
    if (typeof window === 'undefined') {
      return;
    }

    const mediaQuery = window.matchMedia('(min-width: 1024px)');

    const handleChange = (event: MediaQueryList | MediaQueryListEvent) => {
      const matches = 'matches' in event ? event.matches : (event as MediaQueryList).matches;
      setIsDesktop(matches);
      if (!matches) {
        setShowFilters(false);
      }
    };

    handleChange(mediaQuery);

    const listener = handleChange as (event: MediaQueryListEvent) => void;
    if (mediaQuery.addEventListener) {
      mediaQuery.addEventListener('change', listener);
    } else {
      // @ts-ignore legacy support
      mediaQuery.addListener(listener);
    }

    return () => {
      if (mediaQuery.removeEventListener) {
        mediaQuery.removeEventListener('change', listener);
      } else {
        // @ts-ignore legacy support
        mediaQuery.removeListener(listener);
      }
    };
  }, []);

  const renderQuickFilters = () => (
    <div className="mt-6">
      <div className="hidden xl:grid grid-cols-[repeat(auto-fit,minmax(180px,1fr))] gap-4 p-4 bg-muted/20 border border-border/50 rounded-xl">
        <QuickFilterBlock label="–ì–æ—Ä–æ–¥">
          <Select value={selectedCity} onValueChange={setSelectedCity}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–í—Å—è –ü–æ–ª—å—à–∞" />
            </SelectTrigger>
            <SelectContent className="max-h-[280px]">
              {POLISH_CITIES.map((city) => (
                <SelectItem key={city.id} value={city.id}>
                  {city.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è">
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
            </SelectTrigger>
            <SelectContent>
              {OLX_CATEGORIES.map((item) => (
                <SelectItem key={item.id} value={item.id}>
                  {item.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–ë—Ä–µ–Ω–¥">
          <Select value={selectedBrand} onValueChange={setSelectedBrand}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–í—Å–µ –±—Ä–µ–Ω–¥—ã" />
            </SelectTrigger>
            <SelectContent className="max-h-[240px]">
              <SelectItem value="all">–í—Å–µ –±—Ä–µ–Ω–¥—ã</SelectItem>
              {PC_BRANDS.map((brand) => (
                <SelectItem key={brand.id} value={brand.id}>
                  {brand.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–¶–µ–Ω–∞">
          <div className="flex items-center gap-2">
            <Input
              placeholder="–û—Ç"
              type="number"
              value={minPrice}
              onChange={(e) => setMinPrice(e.target.value)}
              className="h-9 text-sm"
            />
            <Input
              placeholder="–î–æ"
              type="number"
              value={maxPrice}
              onChange={(e) => setMaxPrice(e.target.value)}
              className="h-9 text-sm"
            />
          </div>
        </QuickFilterBlock>

        <QuickFilterBlock label="–°–æ—Å—Ç–æ—è–Ω–∏–µ">
          <Select value={selectedCondition} onValueChange={setSelectedCondition}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–õ—é–±–æ–µ" />
            </SelectTrigger>
            <SelectContent>
              {ITEM_CONDITIONS.map((item) => (
                <SelectItem key={item.id} value={item.id}>
                  {item.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞">
          <Select value={selectedSellerType} onValueChange={setSelectedSellerType}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–õ—é–±–æ–π" />
            </SelectTrigger>
            <SelectContent>
              {SELLER_TYPES.map((item) => (
                <SelectItem key={item.id} value={item.id}>
                  {item.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–î–∞—Ç–∞">
          <Select value={selectedDateFilter} onValueChange={setSelectedDateFilter}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–õ—é–±–∞—è" />
            </SelectTrigger>
            <SelectContent>
              {DATE_FILTERS.map((item) => (
                <SelectItem key={item.id} value={item.id}>
                  {item.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞">
          <Select value={selectedSort} onValueChange={setSelectedSort}>
            <SelectTrigger className="h-9 text-sm">
              <SelectValue placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" />
            </SelectTrigger>
            <SelectContent>
              {SORT_OPTIONS.map((item) => (
                <SelectItem key={item.id} value={item.id}>
                  {item.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </QuickFilterBlock>

        <QuickFilterBlock label="–î–æ—Å—Ç–∞–≤–∫–∞ OLX">
          <Button
            variant={withDelivery ? 'default' : 'outline'}
            size="sm"
            className="h-9 text-sm"
            onClick={() => setWithDelivery(!withDelivery)}
          >
            {withDelivery ? '–¢–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π' : '–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'}
          </Button>
        </QuickFilterBlock>

        <QuickFilterBlock label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ">
          <Button
            variant="secondary"
            size="sm"
            className="h-9 text-sm"
            onClick={() => setShowFilters(true)}
          >
            –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
          </Button>
        </QuickFilterBlock>
      </div>

      <div className="xl:hidden">
        <ScrollArea className="w-full">
          <div className="flex items-center gap-4 py-3 px-4 w-max bg-muted/20 border border-border/50 rounded-xl">
            <QuickFilterBlock label="–ì–æ—Ä–æ–¥" compact>
              <Select value={selectedCity} onValueChange={setSelectedCity}>
                <SelectTrigger className="h-9 text-sm w-[160px]">
                  <SelectValue placeholder="–í—Å—è –ü–æ–ª—å—à–∞" />
                </SelectTrigger>
                <SelectContent className="max-h-[280px]">
                  {POLISH_CITIES.map((city) => (
                    <SelectItem key={city.id} value={city.id}>
                      {city.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" compact>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="h-9 text-sm w-[160px]">
                  <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
                </SelectTrigger>
                <SelectContent>
                  {OLX_CATEGORIES.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–ë—Ä–µ–Ω–¥" compact>
              <Select value={selectedBrand} onValueChange={setSelectedBrand}>
                <SelectTrigger className="h-9 text-sm w-[160px]">
                  <SelectValue placeholder="–í—Å–µ –±—Ä–µ–Ω–¥—ã" />
                </SelectTrigger>
                <SelectContent className="max-h-[240px]">
                  <SelectItem value="all">–í—Å–µ –±—Ä–µ–Ω–¥—ã</SelectItem>
                  {PC_BRANDS.map((brand) => (
                    <SelectItem key={brand.id} value={brand.id}>
                      {brand.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–¶–µ–Ω–∞" compact>
              <div className="flex items-center gap-2">
                <Input
                  placeholder="–û—Ç"
                  type="number"
                  value={minPrice}
                  onChange={(e) => setMinPrice(e.target.value)}
                  className="h-9 text-sm w-[120px]"
                />
                <Input
                  placeholder="–î–æ"
                  type="number"
                  value={maxPrice}
                  onChange={(e) => setMaxPrice(e.target.value)}
                  className="h-9 text-sm w-[120px]"
                />
              </div>
            </QuickFilterBlock>

            <QuickFilterBlock label="–°–æ—Å—Ç–æ—è–Ω–∏–µ" compact>
              <Select value={selectedCondition} onValueChange={setSelectedCondition}>
                <SelectTrigger className="h-9 text-sm w-[150px]">
                  <SelectValue placeholder="–õ—é–±–æ–µ" />
                </SelectTrigger>
                <SelectContent>
                  {ITEM_CONDITIONS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞" compact>
              <Select value={selectedSellerType} onValueChange={setSelectedSellerType}>
                <SelectTrigger className="h-9 text-sm w-[150px]">
                  <SelectValue placeholder="–õ—é–±–æ–π" />
                </SelectTrigger>
                <SelectContent>
                  {SELLER_TYPES.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–î–∞—Ç–∞" compact>
              <Select value={selectedDateFilter} onValueChange={setSelectedDateFilter}>
                <SelectTrigger className="h-9 text-sm w-[150px]">
                  <SelectValue placeholder="–õ—é–±–∞—è" />
                </SelectTrigger>
                <SelectContent>
                  {DATE_FILTERS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞" compact>
              <Select value={selectedSort} onValueChange={setSelectedSort}>
                <SelectTrigger className="h-9 text-sm w-[150px]">
                  <SelectValue placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {SORT_OPTIONS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </QuickFilterBlock>

            <QuickFilterBlock label="–î–æ—Å—Ç–∞–≤–∫–∞ OLX" compact>
              <Button
                variant={withDelivery ? 'default' : 'outline'}
                size="sm"
                className="h-9 text-sm"
                onClick={() => setWithDelivery(!withDelivery)}
              >
                {withDelivery ? '–¢–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π' : '–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'}
              </Button>
            </QuickFilterBlock>

            <QuickFilterBlock label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" compact>
              <Button
                variant="secondary"
                size="sm"
                className="h-9 text-sm"
                onClick={() => setShowFilters(true)}
              >
                –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            </QuickFilterBlock>
          </div>
          <ScrollBar orientation="horizontal" className="h-1" />
        </ScrollArea>
      </div>
    </div>
  );

  const renderFiltersBody = (variant: 'inline' | 'drawer' = 'drawer') => {
    const cityLabel = selectedCity !== 'all'
      ? POLISH_CITIES.find((city) => city.id === selectedCity)?.name ?? '–ü–æ–ª—å—à–∞'
      : null;
    const brandLabel = selectedBrand !== 'all'
      ? PC_BRANDS.find((brand) => brand.id === selectedBrand)?.name ?? '‚Äî'
      : null;
    const conditionLabel = selectedCondition !== 'all'
      ? ITEM_CONDITIONS.find((item) => item.id === selectedCondition)?.name ?? '‚Äî'
      : null;
    const sellerLabel = selectedSellerType !== 'all'
      ? SELLER_TYPES.find((item) => item.id === selectedSellerType)?.name ?? '‚Äî'
      : null;
    const dateLabel = selectedDateFilter !== 'all'
      ? DATE_FILTERS.find((item) => item.id === selectedDateFilter)?.name ?? '‚Äî'
      : null;
    const sortLabel = SORT_OPTIONS.find((item) => item.id === selectedSort)?.name ?? '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏';

    const activeFilters = [
      cityLabel && { label: '–ì–æ—Ä–æ–¥', value: cityLabel },
      brandLabel && { label: '–ë—Ä–µ–Ω–¥', value: brandLabel },
      minPrice && { label: '–ú–∏–Ω. —Ü–µ–Ω–∞', value: `${minPrice} z≈Ç` },
      maxPrice && { label: '–ú–∞–∫—Å. —Ü–µ–Ω–∞', value: `${maxPrice} z≈Ç` },
      conditionLabel && { label: '–°–æ—Å—Ç–æ—è–Ω–∏–µ', value: conditionLabel },
      sellerLabel && { label: '–ü—Ä–æ–¥–∞–≤–µ—Ü', value: sellerLabel },
      withDelivery && { label: '–î–æ—Å—Ç–∞–≤–∫–∞', value: '–¢–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π OLX' },
      dateLabel && { label: '–î–∞—Ç–∞', value: dateLabel },
      sortLabel && { label: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', value: sortLabel },
    ].filter(Boolean) as { label: string; value: string }[];

    return (
      <div className={`space-y-5 ${variant === 'inline' ? 'p-0' : 'p-5'}`}>
        <div className="flex items-start justify-between gap-3">
          <div>
            <p className="text-sm font-semibold text-muted-foreground">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É</p>
            <p className="text-xs text-muted-foreground/70">–§–∏–ª—å—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã–¥–∞—á—É –∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
          </div>
          <div className="flex items-center gap-2">
            {activeFilters.length > 0 && (
              <Badge variant="secondary" className="text-xs">{activeFilters.length} –∞–∫—Ç–∏–≤–Ω.</Badge>
            )}
            {variant === 'drawer' && (
              <Button variant="ghost" size="icon" onClick={() => setShowFilters(false)}>
                <X className="size-4" />
              </Button>
            )}
          </div>
        </div>

        {activeFilters.length > 0 && (
          <div className="flex flex-wrap gap-2">
            {activeFilters.map((filter) => (
              <Badge key={filter.label} variant="outline" className="text-xs flex items-center gap-1">
                <span className="font-medium text-foreground/80">{filter.label}:</span>
                <span className="text-foreground/70">{filter.value}</span>
              </Badge>
            ))}
          </div>
        )}

        <Accordion type="multiple" className="space-y-3">
          <AccordionItem value="city" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <MapPin className="size-4" />
              –ì–æ—Ä–æ–¥
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedCity} onValueChange={setSelectedCity}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" />
                </SelectTrigger>
                <SelectContent className="max-h-[280px]">
                  {POLISH_CITIES.map((city) => (
                    <SelectItem key={city.id} value={city.id}>
                      {city.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="category" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Tag className="size-4" />
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
                </SelectTrigger>
                <SelectContent>
                  {OLX_CATEGORIES.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="brand" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Star className="size-4" />
              –ë—Ä–µ–Ω–¥
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedBrand} onValueChange={setSelectedBrand}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—Å–µ –±—Ä–µ–Ω–¥—ã" />
                </SelectTrigger>
                <SelectContent className="max-h-[240px]">
                  <SelectItem value="all">–í—Å–µ –±—Ä–µ–Ω–¥—ã</SelectItem>
                  {PC_BRANDS.map((brand) => (
                    <SelectItem key={brand.id} value={brand.id}>
                      {brand.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="price" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <DollarSign className="size-4" />
              –¶–µ–Ω–∞
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3 space-y-3">
              <div className="grid grid-cols-2 gap-2">
                <Input
                  placeholder="–û—Ç"
                  type="number"
                  value={minPrice}
                  onChange={(e) => setMinPrice(e.target.value)}
                />
                <Input
                  placeholder="–î–æ"
                  type="number"
                  value={maxPrice}
                  onChange={(e) => setMaxPrice(e.target.value)}
                />
              </div>
              <div className="flex flex-wrap gap-2">
                {PRICE_PRESETS.map((preset) => (
                  <Button
                    key={preset.id}
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={() => {
                      setMinPrice(preset.min ? String(preset.min) : '');
                      setMaxPrice(preset.max ? String(preset.max) : '');
                    }}
                  >
                    {preset.name}
                  </Button>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="state" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Badge variant="outline" className="text-xs uppercase">–°–æ—Å—Ç–æ—è–Ω–∏–µ</Badge>
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedCondition} onValueChange={setSelectedCondition}>
                <SelectTrigger>
                  <SelectValue placeholder="–õ—é–±–æ–µ" />
                </SelectTrigger>
                <SelectContent>
                  {ITEM_CONDITIONS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="seller" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Bookmark className="size-4" />
              –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedSellerType} onValueChange={setSelectedSellerType}>
                <SelectTrigger>
                  <SelectValue placeholder="–õ—é–±–æ–π" />
                </SelectTrigger>
                <SelectContent>
                  {SELLER_TYPES.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="delivery" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Truck className="size-4" />
              –î–æ—Å—Ç–∞–≤–∫–∞ OLX
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Button
                variant={withDelivery ? 'default' : 'outline'}
                size="sm"
                className="w-full"
                onClick={() => setWithDelivery(!withDelivery)}
              >
                {withDelivery ? '‚úì –¢–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π' : '–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'}
              </Button>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="date" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <Clock className="size-4" />
              –î–∞—Ç–∞
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedDateFilter} onValueChange={setSelectedDateFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è" />
                </SelectTrigger>
                <SelectContent>
                  {DATE_FILTERS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>

          <AccordionItem value="sort" className="border border-border/60 rounded-xl bg-muted/10">
            <AccordionTrigger className="px-3 text-sm font-medium gap-2">
              <BarChart3 className="size-4" />
              –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            </AccordionTrigger>
            <AccordionContent className="px-3 pb-3">
              <Select value={selectedSort} onValueChange={setSelectedSort}>
                <SelectTrigger>
                  <SelectValue placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  {SORT_OPTIONS.map((item) => (
                    <SelectItem key={item.id} value={item.id}>
                      {item.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        {searchHistory.length > 0 && (
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-sm font-medium">
              <History className="size-4" />
              –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            </div>
            <div className="flex flex-wrap gap-2">
              {searchHistory.map((item, index) => (
                <Button
                  key={`${item}-${index}`}
                  variant="secondary"
                  size="sm"
                  className="text-xs"
                  onClick={() => setSearchQuery(item)}
                >
                  {item}
                </Button>
              ))}
            </div>
          </div>
        )}

        {savedSearches.length > 0 && (
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-sm font-medium">
              <Bookmark className="size-4" />
              –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏
            </div>
            <div className="space-y-2">
              {savedSearches.map((search, index) => (
                <Button
                  key={`${search.name}-${index}`}
                  variant="ghost"
                  size="sm"
                  className="w-full justify-start text-xs hover:bg-muted"
                  onClick={() => loadSearch(search.params)}
                >
                  {search.name}
                </Button>
              ))}
            </div>
          </div>
        )}

        <Separator />
        <Button
          variant="outline"
          className="w-full"
          onClick={() => {
            setSearchQuery('');
            setSelectedCity('all');
            setSelectedCategory('pc-components');
            setSelectedBrand('all');
            setSelectedSellerType('all');
            setSelectedCondition('all');
            setSelectedDateFilter('all');
            setSelectedSort('date_desc');
            setMinPrice('');
            setMaxPrice('');
            setWithDelivery(false);
          }}
        >
          –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        </Button>
      </div>
    );
  };

  const applyQuickSearch = (config: QuickSearchConfig) => {
    setSearchQuery(config.query);
    setSelectedCity(config.city ?? 'all');
    setMinPrice(config.minPrice ? String(config.minPrice) : '');
    setMaxPrice(config.maxPrice ? String(config.maxPrice) : '');
    setSelectedBrand(config.brand ?? 'all');
    setWithDelivery(Boolean(config.withDelivery));
    setTimeout(() => {
      handleSearch();
    }, 0);
  };

  const handleSearch = async () => {
    setIsSearching(true);
    setCurrentPage(1);
    
    // Add to search history
    if (searchQuery && !searchHistory.includes(searchQuery)) {
      setSearchHistory(prev => [searchQuery, ...prev].slice(0, 5));
    }
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç backend
      const backendUrl = 'http://localhost:3002';
      
      const requestBody = {
        query: searchQuery || '',
        marketplace: 'olx',
        minPrice: minPrice || undefined,
        maxPrice: maxPrice || undefined,
        category: selectedCategory,
        location: selectedCity !== 'all' ? selectedCity : undefined,
        withDelivery: withDelivery, // üöö –§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
      };
      
      console.log('[Frontend] Sending search request:', requestBody);
      
      const response = await fetch(`${backendUrl}/api/search`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody),
      });
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.results && data.results.length > 0) {
          console.log(`[Frontend] Received ${data.results.length} listings from backend`);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º backend –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç OLXListing
          const listings: OLXListing[] = data.results.map((item: any, index: number) => ({
            id: item.id || `olx-${index}`,
            title: item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            price: parseFloat(item.price) || 0,
            currency: 'z≈Ç',
            location: item.location || '–ü–æ–ª—å—à–∞',
            city: selectedCity !== 'all' ? selectedCity : 'all',
            condition: 'used' as const,
            description: item.description || '',
            image: item.image || item.imageUrl || 'https://images.unsplash.com/photo-1591488320449-011701bb6704?w=400',
            url: item.url || undefined, // üîó –ü–†–Ø–ú–ê–Ø –°–°–´–õ–ö–ê –ù–ê –û–ë–™–Ø–í–õ–ï–ù–ò–ï!
            seller: {
              name: item.seller || '–ü—Ä–æ–¥–∞–≤–µ—Ü',
              type: 'private' as const,
            },
            publishedAt: new Date().toISOString().split('T')[0],
            promoted: false,
            category: selectedCategory,
          }));
          
          console.log(`[Frontend] Processed ${listings.length} listings`);
          console.log(`[Frontend] Sample listing:`, listings[0]);
          
          // ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          analyzeAllOffers(listings);
          
          // üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ AI —Ä–µ–π—Ç–∏–Ω–≥—É (–ª—É—á—à–∏–µ —Å–≤–µ—Ä—Ö—É)
          const sortedListings = [...listings].sort((a, b) => {
            const scoreA = aiRecommendations.get(a.id)?.score || 50;
            const scoreB = aiRecommendations.get(b.id)?.score || 50;
            return scoreB - scoreA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
          });
          
          setResults(sortedListings);
          
          const topOffers = sortedListings.filter((_, i) => i < 5); // –¢–æ–ø 5
          toast.success(`–ù–∞–π–¥–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å OLX.pl`, {
            description: `‚ú® ${topOffers.length} –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–µ—Ä—Ö—É | –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${calculateAveragePrice(listings)} z≈Ç`,
          });
          setIsSearching(false);
          return;
        } else {
          // Backend –≤–µ—Ä–Ω—É–ª 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
          console.log('[OLX] Backend returned 0 results, using mock data');
          toast.info('OLX scraper –≤–µ—Ä–Ω—É–ª 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', {
            description: '–ü–æ–∫–∞–∑—ã–≤–∞—é mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
          });
        }
      }
    } catch (error) {
      console.error('Backend error:', error);
      toast.warning('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', {
        description: '–ü–æ–∫–∞–∑—ã–≤–∞—é mock –¥–∞–Ω–Ω—ã–µ',
      });
    }
    
    // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
    console.log('[OLX] Using mock data fallback');
    const filtered = filterOLXListings({
      query: searchQuery,
      city: selectedCity,
      minPrice: minPrice ? parseInt(minPrice) : undefined,
      maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
      condition: selectedCondition,
      category: selectedCategory,
    });
    
    console.log('[OLX] Filtered mock results:', filtered.length);
    setResults(filtered);
    
    // ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
    if (filtered.length > 0) {
      analyzeAllOffers(filtered);
      
      const topOffers = getTopOffers(filtered);
      const offersToAvoid = getOffersToAvoid(filtered);
      
      toast.info(`–ù–∞–π–¥–µ–Ω–æ ${filtered.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`, {
        description: `‚ú® ${topOffers.length} –æ—Ç–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π | ‚ö†Ô∏è ${offersToAvoid.length} –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å`,
      });
    } else {
      toast.warning('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ mock –¥–∞–Ω–Ω—ã—Ö', {
        description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
      });
    }
    
    setIsSearching(false);
  };
  
  // ü§ñ AI –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  const analyzeAllOffers = (listings: OLXListing[]) => {
    const recommendations = new Map<string, AIRecommendation>();
    
    listings.forEach(listing => {
      const recommendation = analyzeOffer(listing, listings);
      recommendations.set(listing.id, recommendation);
    });
    
    setAIRecommendations(recommendations);
    console.log('[AI] Analyzed', recommendations.size, 'offers');
  };

  const handleOpenOnOLX = (listing?: OLXListing) => {
    // –ï—Å–ª–∏ —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (listing?.url) {
      window.open(listing.url, '_blank');
      toast.success('–û—Ç–∫—Ä—ã–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ OLX.pl', {
        description: listing.title,
      });
      return;
    }
    
    // –ò–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º URL –ø–æ–∏—Å–∫–∞
    const url = buildOLXUrl({
      query: listing?.title || searchQuery || 'pc-components',
      city: selectedCity,
      minPrice: minPrice ? parseInt(minPrice) : undefined,
      maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
      condition: selectedCondition,
    });
    
    window.open(url, '_blank');
    toast.success('–û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∏—Å–∫ –Ω–∞ OLX.pl', {
      description: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
    });
  };

  const applyPricePreset = (presetId: string) => {
    const preset = PRICE_PRESETS.find(p => p.id === presetId);
    if (preset) {
      setMinPrice(preset.min ? preset.min.toString() : '');
      setMaxPrice(preset.max ? preset.max.toString() : '');
    }
  };

  const toggleFavorite = (listingId: string) => {
    setFavorites(prev => {
      const newFavorites = new Set(prev);
      if (newFavorites.has(listingId)) {
        newFavorites.delete(listingId);
        toast.info('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      } else {
        newFavorites.add(listingId);
        toast.success('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('olx-favorites', JSON.stringify([...newFavorites]));
      return newFavorites;
    });
  };

  const saveSearch = () => {
    const searchName = searchQuery || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–æ–∏—Å–∫';
    const searchParams = {
      query: searchQuery,
      city: selectedCity,
      category: selectedCategory,
      condition: selectedCondition,
      brand: selectedBrand,
      minPrice,
      maxPrice,
    };
    setSavedSearches(prev => {
      const updated = [...prev, { name: searchName, params: searchParams }];
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('olx-saved-searches', JSON.stringify(updated));
      return updated;
    });
    toast.success(`–ü–æ–∏—Å–∫ "${searchName}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω`);
  };

  const loadSearch = (params: any) => {
    setSearchQuery(params.query || '');
    setSelectedCity(params.city || 'all');
    setSelectedCategory(params.category || 'pc-components');
    setSelectedCondition(params.condition || 'all');
    setSelectedBrand(params.brand || 'all');
    setMinPrice(params.minPrice || '');
    setMaxPrice(params.maxPrice || '');
    handleSearch();
  };

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const totalPages = Math.ceil(results.length / itemsPerPage);
  const paginatedResults = results.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const goToPage = (page: number) => {
    setCurrentPage(Math.max(1, Math.min(page, totalPages)));
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Calculate statistics
  const calculateAveragePrice = (listings: OLXListing[]) => {
    if (listings.length === 0) return 0;
    const sum = listings.reduce((acc, item) => acc + item.price, 0);
    return Math.round(sum / listings.length);
  };

  const calculatePriceStats = () => {
    if (results.length === 0) return null;
    const prices = results.map(r => r.price).sort((a, b) => a - b);
    return {
      min: prices[0],
      max: prices[prices.length - 1],
      avg: calculateAveragePrice(results),
      median: prices[Math.floor(prices.length / 2)],
      total: results.length,
    };
  };

  // Export to CSV
  const exportToCSV = () => {
    if (results.length === 0) {
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–í–∞–ª—é—Ç–∞', '–ì–æ—Ä–æ–¥', '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–î–∞—Ç–∞'];
    const rows = results.map(r => [
      r.title,
      r.price,
      r.currency,
      r.location,
      r.condition === 'new' ? '–ù–æ–≤–æ–µ' : '–ë/–£',
      r.seller.name,
      r.publishedAt,
    ]);

    const csv = [headers, ...rows].map(row => row.join(',')).join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `olx-search-${Date.now()}.csv`;
    link.click();
    toast.success('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
  };

  // Toggle comparison
  const toggleComparison = (listingId: string) => {
    setComparisonList(prev => {
      const newList = new Set(prev);
      if (newList.has(listingId)) {
        newList.delete(listingId);
        toast.info('–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
      } else {
        if (newList.size >= 4) {
          toast.warning('–ú–∞–∫—Å–∏–º—É–º 4 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
          return prev;
        }
        newList.add(listingId);
        toast.success('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ');
      }
      return newList;
    });
  };

  // Copy share link
  const shareSearch = () => {
    const url = buildOLXUrl({
      query: searchQuery || 'pc-components',
      city: selectedCity,
      minPrice: minPrice ? parseInt(minPrice) : undefined,
      maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
      condition: selectedCondition,
    });
    
    navigator.clipboard.writeText(url);
    toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', { description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞' });
  };
  
  // üëç –õ–∞–π–∫
  const handleLike = (listing: OLXListing) => {
    savePreference(listing, 'like');
    setUserPreferences(prev => {
      const newPrefs = new Map(prev);
      newPrefs.set(listing.id, 'like');
      return newPrefs;
    });

    toast.success('üëç –õ–∞–π–∫!', {
      description: 'AI –∑–∞–ø–æ–º–Ω–∏—Ç —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è',
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ª–∞–π–∫–∞
    analyzeAllOffers(results);
  };

  // üëé –î–∏–∑–ª–∞–π–∫
  const handleDislike = (listing: OLXListing) => {
    savePreference(listing, 'dislike');
    setUserPreferences(prev => {
      const newPrefs = new Map(prev);
      newPrefs.set(listing.id, 'dislike');
      return newPrefs;
    });

    toast.error('üëé –î–∏–∑–ª–∞–π–∫', {
      description: 'AI –±—É–¥–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤',
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –¥–∏–∑–ª–∞–π–∫–∞
    analyzeAllOffers(results);
  };

  const totalPages = Math.ceil(results.length / itemsPerPage);
  const paginatedResults = results.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const goToPage = (page: number) => {
    setCurrentPage(Math.max(1, Math.min(page, totalPages)));
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const calculateAveragePrice = (listings: OLXListing[]) => {
    if (listings.length === 0) return 0;
    const sum = listings.reduce((acc, item) => acc + item.price, 0);
    return Math.round(sum / listings.length);
  };

  const calculatePriceStats = () => {
    if (results.length === 0) return null;
    const prices = results.map(r => r.price).sort((a, b) => a - b);
    return {
      min: prices[0],
      max: prices[prices.length - 1],
      avg: calculateAveragePrice(results),
      median: prices[Math.floor(prices.length / 2)],
      total: results.length,
    };
  };

  const topRecommendations = results.length > 0 ? getTopOffers(results) : [];
  const riskyRecommendations = results.length > 0 ? getOffersToAvoid(results) : [];

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
  {results.length > 0 && (
    <div className="px-4 pt-4 text-sm text-muted-foreground flex flex-wrap items-center gap-2">
      <span>–ù–∞–π–¥–µ–Ω–æ: {results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</span>
      {selectedCity !== 'all' && (
        <Badge variant="secondary">
          {POLISH_CITIES.find(c => c.id === selectedCity)?.name}
        </Badge>
      )}
      {minPrice && <Badge variant="secondary">–û—Ç {minPrice} z≈Ç</Badge>}
      {maxPrice && <Badge variant="secondary">–î–æ {maxPrice} z≈Ç</Badge>}
      {selectedCondition !== 'all' && (
        <Badge variant="secondary">
          {ITEM_CONDITIONS.find(c => c.id === selectedCondition)?.name}
        </Badge>
      )}
      {selectedBrand !== 'all' && (
        <Badge variant="secondary">
          {PC_BRANDS.find(b => b.id === selectedBrand)?.name}
        </Badge>
      )}
      {favorites.size > 0 && (
        <Badge variant="outline" className="text-red-500">
          <Heart className="size-3 mr-1 fill-red-500" />
          {favorites.size} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        </Badge>
      )}
      {comparisonList.size > 0 && (
        <Badge 
          variant="outline" 
          className="text-blue-500 cursor-pointer hover:bg-blue-50"
          onClick={() => setShowComparison(true)}
        >
          <BarChart3 className="size-3 mr-1" />
          {comparisonList.size} –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ - –û—Ç–∫—Ä—ã—Ç—å
        </Badge>
      )}
    </div>
  )}

  {showStats && results.length > 0 && (
    <Card className="mx-4 mt-4">
      <CardHeader className="pb-3">
        <CardTitle className="text-sm">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω</CardTitle>
      </CardHeader>
      <CardContent>
        {(() => {
          const stats = calculatePriceStats();
          if (!stats) return null;
          return (
            <div className="grid grid-cols-5 gap-4">
              <div>
                <div className="text-xs text-muted-foreground">–ú–∏–Ω–∏–º—É–º</div>
                <div className="text-lg font-bold text-green-600">{stats.min} z≈Ç</div>
              </div>
              <div>
                <div className="text-xs text-muted-foreground">–ú–∞–∫—Å–∏–º—É–º</div>
                <div className="text-lg font-bold text-red-600">{stats.max} z≈Ç</div>
              </div>
              <div>
                <div className="text-xs text-muted-foreground">–°—Ä–µ–¥–Ω—è—è</div>
                <div className="text-lg font-bold text-blue-600">{stats.avg} z≈Ç</div>
              </div>
              <div>
                <div className="text-xs text-muted-foreground">–ú–µ–¥–∏–∞–Ω–∞</div>
                <div className="text-lg font-bold text-purple-600">{stats.median} z≈Ç</div>
              </div>
              <div>
                <div className="text-xs text-muted-foreground">–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>
                <div className="text-lg font-bold">{stats.total}</div>
              </div>
            </div>
          );
        })()}
      </CardContent>
    </Card>
  )}

  {results.length === 0 && (
    <div>
                <Card className="border-dashed">
                  <CardHeader>
                    <CardTitle className="text-base">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –æ—Ç –ø–æ–∏—Å–∫–∞?</CardTitle>
                    <CardDescription>–ü–∞—Ä–∞ —Å–æ–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â—É—é.</CardDescription>
                  </CardHeader>
                  <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground">
                    <div className="space-y-2">
                      <h4 className="font-medium text-foreground">1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h4>
                      <p>–ù–∞–ø—Ä–∏–º–µ—Ä: `RTX 3060 Ti`, `Ryzen 5 5600X`, `NVMe 1TB`. –ß–µ–º —Ç–æ—á–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –º–µ–Ω—å—à–µ –º—É—Å–æ—Ä–∞.</p>
                    </div>
                    <div className="space-y-2">
                      <h4 className="font-medium text-foreground">2. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç</h4>
                      <p>–í –ø–æ–ª—è—Ö **–û—Ç/–î–æ** –∑–∞–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.</p>
                    </div>
                    <div className="space-y-2">
                      <h4 className="font-medium text-foreground">3. –í–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É OLX</h4>
                      <p>–û—Ç–º–µ—Ç—å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–° –¥–æ—Å—Ç–∞–≤–∫–æ–π¬ª ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ —É–¥–æ–±–Ω–æ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.</p>
                    </div>
                  </CardContent>
                </Card>

            </div>
             )}
             {isSearching && (
              <div className="flex items-center justify-center py-16">
                <div className="text-center max-w-md mx-auto">
                  {/* üé® –ö—Ä—É—Ç–æ–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                  <div className="relative size-32 mx-auto mb-6">
                    {/* –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ */}
                    <div className="absolute inset-0 border-4 border-orange-200 dark:border-orange-900 rounded-full" />
                    {/* –í—Ä–∞—â–∞—é—â–µ–µ—Å—è –∫–æ–ª—å—Ü–æ */}
                    <div className="absolute inset-0 border-4 border-transparent border-t-orange-500 rounded-full animate-spin" />
                    {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–µ –∫–æ–ª—å—Ü–æ */}
                    <div className="absolute inset-4 border-4 border-transparent border-t-orange-400 rounded-full animate-spin" style={{ animationDuration: '1.5s' }} />
                    {/* –ò–∫–æ–Ω–∫–∞ */}
                    <div className="absolute inset-0 flex items-center justify-center">
                      <Search className="size-12 text-orange-500 animate-pulse" />
                    </div>
                  </div>
                  
                  {/* –¢–µ–∫—Å—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
                  <div className="space-y-3">
                    <p className="text-lg font-semibold text-orange-600 dark:text-orange-400 animate-pulse">
                      üîç –ò—â–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ OLX...
                    </p>
                    <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
                      <div className="size-1.5 bg-orange-500 rounded-full animate-bounce" />
                      <div className="size-1.5 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                      <div className="size-1.5 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                    </div>
                    <p className="text-xs text-muted-foreground">
                      –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å OLX.pl
                    </p>
                    <p className="text-xs text-muted-foreground opacity-70">
                      –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...
                    </p>
                  </div>
                </div>
              </div>
            )}
            {!isSearching && (
              <>
              <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-3'}>
                {paginatedResults.map((listing, index) => (
                  <Card key={`${listing.id}-${index}`} className="hover:border-primary cursor-pointer transition-all group hover:shadow-lg">
                    <CardHeader className="p-0">
                      <div className="relative">
                        <img
                          src={listing.image}
                          alt={listing.title}
                          className="w-full h-40 object-cover rounded-t-lg"
                          onError={(e) => {
                            e.currentTarget.src = 'https://images.unsplash.com/photo-1591488320449-011701bb6704?w=800&q=80';
                          }}
                        />
                        {listing.promoted && (
                          <Badge className="absolute top-2 left-2 bg-orange-500">
                            <TrendingUp className="size-3 mr-1" />
                            –ü—Ä–æ–º–æ
                          </Badge>
                        )}
                        <Badge className="absolute top-2 right-2 bg-background/90">
                          {listing.condition === 'new' ? '–ù–æ–≤–æ–µ' : '–ë/–£'}
                        </Badge>
                        
                        {/* ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è */}
                        {aiRecommendations.has(listing.id) && (() => {
                          const rec = aiRecommendations.get(listing.id)!;
                          let badgeClass = '';
                          let Icon = Zap;
                          let label = '';
                          
                          if (rec.category === 'excellent') {
                            badgeClass = 'bg-green-500 text-white';
                            Icon = Award;
                            label = `${rec.score} ‚≠ê`;
                          } else if (rec.category === 'good') {
                            badgeClass = 'bg-blue-500 text-white';
                            Icon = ThumbsUp;
                            label = `${rec.score} üëç`;
                          } else if (rec.category === 'fair') {
                            badgeClass = 'bg-yellow-500 text-white';
                            Icon = Zap;
                            label = `${rec.score}`;
                          } else if (rec.category === 'poor') {
                            badgeClass = 'bg-orange-500 text-white';
                            Icon = AlertCircle;
                            label = `${rec.score} ‚ö†Ô∏è`;
                          } else {
                            badgeClass = 'bg-red-500 text-white';
                            Icon = AlertTriangle;
                            label = `${rec.score} üö´`;
                          }
                          
                          return (
                            <Badge className={`absolute bottom-2 left-2 ${badgeClass}`}>
                              <Icon className="size-3 mr-1" />
                              AI: {label}
                            </Badge>
                          );
                        })()}
                      </div>
                    </CardHeader>
                    <CardContent className="p-3">
                      <CardTitle className="text-xs line-clamp-2 mb-1 font-semibold leading-tight">
                        {listing.title}
                      </CardTitle>

                      <div className="mb-2">
                        <div className="text-lg font-bold text-green-600">
                          {listing.price} {listing.currency}
                        </div>
                        <div className="text-[10px] text-muted-foreground flex items-center gap-0.5">
                          <MapPin className="size-2.5" />
                          {listing.location}
                        </div>
                      </div>

                      {/* –õ–∞–π–∫/–î–∏–∑–ª–∞–π–∫ –∫–Ω–æ–ø–∫–∏ */}
                      <div className="flex gap-1 mb-2">
                        <Button
                          size="sm"
                          variant={userPreferences.get(listing.id) === 'like' ? 'default' : 'outline'}
                          className={`flex-1 h-7 ${userPreferences.get(listing.id) === 'like' ? 'bg-green-500 hover:bg-green-600' : ''}`}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleLike(listing);
                          }}
                        >
                          <ThumbsUp className={`size-3 ${userPreferences.get(listing.id) === 'like' ? 'fill-white' : ''}`} />
                        </Button>
                        <Button
                          size="sm"
                          variant={userPreferences.get(listing.id) === 'dislike' ? 'default' : 'outline'}
                          className={`flex-1 h-7 ${userPreferences.get(listing.id) === 'dislike' ? 'bg-red-500 hover:bg-red-600' : ''}`}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDislike(listing);
                          }}
                        >
                          <ThumbsDown className={`size-3 ${userPreferences.get(listing.id) === 'dislike' ? 'fill-white' : ''}`} />
                        </Button>
                      </div>

                      {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant={favorites.has(listing.id) ? 'default' : 'outline'}
                          className="h-7"
                          onClick={(e) => {
                            e.stopPropagation();
                            toggleFavorite(listing.id);
                          }}
                        >
                          <Heart className={`size-3 ${favorites.has(listing.id) ? 'fill-red-500 text-red-500' : ''}`} />
                        </Button>
                        <Button
                          size="sm"
                          variant={comparisonList.has(listing.id) ? 'default' : 'outline'}
                          className="h-7"
                          onClick={(e) => {
                            e.stopPropagation();
                            toggleComparison(listing.id);
                          }}
                        >
                          <BarChart3 className="size-3" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="flex-1 h-7"
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedListing(listing);
                          }}
                        >
                          <Eye className="size-3" />
                        </Button>
                        <Button
                          size="sm"
                          className="flex-1 h-7"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleOpenOnOLX(listing);
                          }}
                        >
                          <ExternalLink className="size-3" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Pagination */}
              {totalPages > 1 && (
                <div className="flex items-center justify-center gap-2 mt-6">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => goToPage(currentPage - 1)}
                    disabled={currentPage === 1}
                  >
                    <ChevronLeft className="size-4" />
                  </Button>
                  
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                    <Button
                      key={page}
                      size="sm"
                      variant={currentPage === page ? 'default' : 'outline'}
                      onClick={() => goToPage(page)}
                    >
                      {page}
                    </Button>
                  ))}
                  
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => goToPage(currentPage + 1)}
                    disabled={currentPage === totalPages}
                  >
                    <ChevronRight className="size-4" />
                  </Button>
                </div>
              )}
              </>
            )}
          </div>
        </div>
      </div>

      {/* Listing Details Modal */}
      {selectedListing && (
        <div className="fixed inset-0 z-[60] flex items-center justify-center bg-black/50 p-4 overflow-auto" onClick={() => setSelectedListing(null)}>
          <div className="w-full max-w-3xl my-8">
          <Card className="w-full" onClick={(e) => e.stopPropagation()}>
            <CardHeader className="relative">
              <Button
                variant="ghost"
                size="icon"
                className="absolute top-4 right-4"
                onClick={() => setSelectedListing(null)}
              >
                <X className="size-4" />
              </Button>
              <img
                src={selectedListing.image}
                alt={selectedListing.title}
                className="w-full h-64 object-cover rounded-lg mb-4"
              />
              <CardTitle>{selectedListing.title}</CardTitle>
              <CardDescription>
                <div className="flex items-center gap-2 mt-2">
                  <Badge variant={selectedListing.condition === 'new' ? 'default' : 'secondary'}>
                    {selectedListing.condition === 'new' ? '–ù–æ–≤–æ–µ' : '–ë/–£'}
                  </Badge>
                  {selectedListing.promoted && (
                    <Badge variant="outline" className="text-orange-500">
                      <TrendingUp className="size-3 mr-1" />
                      –ü—Ä–æ–º–æ
                    </Badge>
                  )}
                </div>
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div>
                  <h3 className="font-semibold mb-2">–¶–µ–Ω–∞</h3>
                  <div className="text-3xl font-bold text-green-600">
                    {selectedListing.price} {selectedListing.currency}
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                  <p className="text-sm text-muted-foreground">
                    {selectedListing.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                  </p>
                </div>

                <Separator />

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-semibold mb-2 flex items-center gap-2">
                      <MapPin className="size-4" />
                      –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    </h3>
                    <p className="text-sm">{selectedListing.location}</p>
                  </div>
                  <div>
                    <h3 className="font-semibold mb-2 flex items-center gap-2">
                      <Clock className="size-4" />
                      –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    </h3>
                    <p className="text-sm">
                      {new Date(selectedListing.publishedAt).toLocaleDateString('pl-PL', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </p>
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">–ü—Ä–æ–¥–∞–≤–µ—Ü</h3>
                  <div className="flex items-center gap-2">
                    {selectedListing.seller.type === 'business' ? (
                      <span className="text-sm">üè¢ {selectedListing.seller.name}</span>
                    ) : (
                      <div className="flex items-center gap-2">
                        <span className="text-sm">{selectedListing.seller.name}</span>
                        {selectedListing.seller.rating && (
                          <div className="flex items-center gap-1">
                            <Star className="size-4 fill-yellow-400 text-yellow-400" />
                            <span className="text-sm font-medium">{selectedListing.seller.rating}</span>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                <Separator />

                {/* ü§ñ AI –ê–Ω–∞–ª–∏–∑ */}
                {aiRecommendations.has(selectedListing.id) && (() => {
                  const rec = aiRecommendations.get(selectedListing.id)!;
                  let bgColor = '';
                  let borderColor = '';
                  
                  if (rec.category === 'excellent') {
                    bgColor = 'bg-green-50';
                    borderColor = 'border-green-500';
                  } else if (rec.category === 'good') {
                    bgColor = 'bg-blue-50';
                    borderColor = 'border-blue-500';
                  } else if (rec.category === 'fair') {
                    bgColor = 'bg-yellow-50';
                    borderColor = 'border-yellow-500';
                  } else if (rec.category === 'poor') {
                    bgColor = 'bg-orange-50';
                    borderColor = 'border-orange-500';
                  } else {
                    bgColor = 'bg-red-50';
                    borderColor = 'border-red-500';
                  }
                  
                  return (
                    <div className={`${bgColor} border-2 ${borderColor} rounded-lg p-4`}>
                      <h3 className="font-semibold mb-3 flex items-center gap-2">
                        <Zap className="size-5" />
                        AI –ê–Ω–∞–ª–∏–∑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                      </h3>
                      
                      {/* Score */}
                      <div className="mb-3">
                        <div className="flex items-center justify-between mb-1">
                          <span className="text-sm font-medium">–û—Ü–µ–Ω–∫–∞</span>
                          <span className="text-lg font-bold">{rec.score}/100</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full ${
                              rec.score >= 80 ? 'bg-green-500' :
                              rec.score >= 65 ? 'bg-blue-500' :
                              rec.score >= 45 ? 'bg-yellow-500' :
                              rec.score >= 30 ? 'bg-orange-500' : 'bg-red-500'
                            }`}
                            style={{ width: `${rec.score}%` }}
                          />
                        </div>
                      </div>
                      
                      {/* Main Reason */}
                      {rec.reasons.length > 0 && (
                        <div className="mb-3 p-2 bg-white/50 rounded">
                          <p className="text-sm font-medium">{rec.reasons[0]}</p>
                        </div>
                      )}
                      
                      {/* Pros */}
                      {rec.pros.length > 0 && (
                        <div className="mb-2">
                          <h4 className="text-xs font-semibold mb-1 text-green-700">‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h4>
                          <ul className="text-xs space-y-1">
                            {rec.pros.map((pro, i) => (
                              <li key={i}>{pro}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {/* Cons */}
                      {rec.cons.length > 0 && (
                        <div className="mb-2">
                          <h4 className="text-xs font-semibold mb-1 text-red-700">‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</h4>
                          <ul className="text-xs space-y-1">
                            {rec.cons.map((con, i) => (
                              <li key={i}>{con}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {/* Price Analysis */}
                      <div className="mt-3 p-2 bg-white/50 rounded text-xs">
                        <strong>–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã:</strong> {rec.priceAnalysis.priceLevel} ({rec.priceAnalysis.comparedToAverage.toFixed(0)}% –æ—Ç —Ä—ã–Ω–∫–∞)
                      </div>
                    </div>
                  );
                })()}

                <Separator />

                <div className="flex gap-2">
                  <Button
                    className="flex-1"
                    onClick={() => {
                      toggleFavorite(selectedListing.id);
                    }}
                    variant={favorites.has(selectedListing.id) ? 'default' : 'outline'}
                  >
                    <Heart className={`size-4 mr-2 ${favorites.has(selectedListing.id) ? 'fill-red-500 text-red-500' : ''}`} />
                    {favorites.has(selectedListing.id) ? '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                  </Button>
                  <Button
                    className="flex-1"
                    onClick={() => handleOpenOnOLX(selectedListing)}
                  >
                    <ExternalLink className="size-4 mr-2" />
                    –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ OLX
                  </Button>
                </div>
              </CardContent>
          </Card>
          </div>
        </div>
      )}

      {/* Comparison Table Modal */}
      {showComparison && (
        <div className="fixed inset-0 z-[60] flex items-center justify-center bg-black/50 p-4 overflow-auto" onClick={() => setShowComparison(false)}>
          <Card className="w-full max-w-6xl" onClick={(e) => e.stopPropagation()}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–æ–≤–∞—Ä–æ–≤ ({comparisonList.size})</CardTitle>
                <Button variant="ghost" size="icon" onClick={() => setShowComparison(false)}>
                  <X className="size-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="overflow-x-auto">
              {comparisonList.size === 0 ? (
                <p className="text-center text-muted-foreground py-8">
                  –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìä –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                </p>
              ) : (
                <table className="w-full border-collapse">
                  <thead>
                    <tr>
                      <th className="border p-2 bg-muted text-left sticky left-0">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</th>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return (
                          <th key={id} className="border p-2 min-w-[200px]">
                            <div className="flex flex-col gap-2">
                              <img src={listing?.image} alt={listing?.title} className="w-full h-32 object-cover rounded" />
                              <p className="text-sm font-medium line-clamp-2">{listing?.title}</p>
                              <Button size="sm" variant="ghost" onClick={() => toggleComparison(id)}>
                                <X className="size-3 mr-1" /> –£–¥–∞–ª–∏—Ç—å
                              </Button>
                            </div>
                          </th>
                        );
                      })}
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">–¶–µ–Ω–∞</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return (
                          <td key={id} className="border p-2 text-center">
                            <span className="text-lg font-bold text-green-600">
                              {listing?.price} {listing?.currency}
                            </span>
                          </td>
                        );
                      })}
                    </tr>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return <td key={id} className="border p-2 text-center">{listing?.location}</td>;
                      })}
                    </tr>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">–°–æ—Å—Ç–æ—è–Ω–∏–µ</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return (
                          <td key={id} className="border p-2 text-center">
                            <Badge variant={listing?.condition === 'new' ? 'default' : 'secondary'}>
                              {listing?.condition === 'new' ? '–ù–æ–≤–æ–µ' : '–ë/–£'}
                            </Badge>
                          </td>
                        );
                      })}
                    </tr>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">AI –†–µ–π—Ç–∏–Ω–≥</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const rec = aiRecommendations.get(id);
                        return (
                          <td key={id} className="border p-2 text-center">
                            {rec ? (
                              <div className="flex items-center justify-center gap-1">
                                <span className="text-2xl">{rec.score >= 80 ? '‚≠ê' : rec.score >= 60 ? 'üëç' : 'üëå'}</span>
                                <span className="font-bold">{rec.score}%</span>
                              </div>
                            ) : (
                              <span className="text-muted-foreground">-</span>
                            )}
                          </td>
                        );
                      })}
                    </tr>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">–ü—Ä–æ–¥–∞–≤–µ—Ü</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return (
                          <td key={id} className="border p-2 text-center">
                            {listing?.seller?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                          </td>
                        );
                      })}
                    </tr>
                    <tr>
                      <td className="border p-2 font-medium bg-muted sticky left-0">–î–µ–π—Å—Ç–≤–∏—è</td>
                      {[...comparisonList].slice(0, 4).map(id => {
                        const listing = results.find(r => r.id === id);
                        return (
                          <td key={id} className="border p-2">
                            <div className="flex flex-col gap-2">
                              <Button size="sm" onClick={() => setSelectedListing(listing!)}>
                                <Eye className="size-3 mr-1" /> –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                              </Button>
                              <Button size="sm" onClick={() => handleOpenOnOLX(listing)}>
                                <ExternalLink className="size-3 mr-1" /> OLX
                              </Button>
                            </div>
                          </td>
                        );
                      })}
                    </tr>
                  </tbody>
                </table>
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
