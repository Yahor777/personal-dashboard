import { useState, useEffect } from 'react';
import { X, Search, ExternalLink, Plus, TrendingUp, Package, Sparkles, Wrench, Check } from 'lucide-react';
import { useStore } from '../store/useStore';
import { useTranslation } from '../data/translations';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Badge } from './ui/badge';
import { ScrollArea } from './ui/scroll-area';
import { Skeleton } from './ui/skeleton';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { AIService, analyzeOLXListing } from '../services/aiService';
import { toast } from 'sonner';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import type { ComponentCondition } from '../types';

interface OLXSearchPanelProps {
  onClose: () => void;
}

interface SearchResult {
  id: string;
  title: string;
  price: number;
  currency: string;
  condition: string;
  location: string;
  url: string;
  image?: string;
  description: string;
}

const PC_COMPONENTS = [
  { value: 'gpu', label: 'üéÆ GPU / –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', keywords: '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ gpu graphics card rtx gtx rx' },
  { value: 'cpu', label: '‚ö° CPU / –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', keywords: '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä cpu intel amd ryzen' },
  { value: 'ram', label: 'üíæ RAM / –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', keywords: '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å ram ddr' },
  { value: 'motherboard', label: 'üîå –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞', keywords: '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ motherboard' },
  { value: 'ssd', label: 'üíø SSD / –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å', keywords: 'ssd nvme –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∏—Å–∫' },
  { value: 'hdd', label: 'üíΩ HDD', keywords: 'hdd –∂–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫' },
  { value: 'psu', label: 'üîã PSU / –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', keywords: '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è psu' },
  { value: 'case', label: 'üì¶ –ö–æ—Ä–ø—É—Å', keywords: '–∫–æ—Ä–ø—É—Å case' },
  { value: 'cooler', label: '‚ùÑÔ∏è –ö—É–ª–µ—Ä / –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', keywords: '–∫—É–ª–µ—Ä –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ cooling' },
];

const CONDITION_LABELS = {
  new: '‚ú® –ù–æ–≤–æ–µ',
  'like-new': '‚≠ê –ö–∞–∫ –Ω–æ–≤–æ–µ',
  good: '‚úÖ –•–æ—Ä–æ—à–µ–µ',
  fair: '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ',
};

export function OLXSearchPanel({ onClose }: OLXSearchPanelProps) {
  const { workspace, addCard } = useStore();
  const { t } = useTranslation(workspace.settings.language);
  const [searchQuery, setSearchQuery] = useState('');
  const [componentType, setComponentType] = useState('gpu');
  const [minPrice, setMinPrice] = useState('');
  const [maxPrice, setMaxPrice] = useState('');
  const [condition, setCondition] = useState('all');
  const [location, setLocation] = useState('all');
  const [delivery, setDelivery] = useState('all');
  const [sellerType, setSellerType] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<SearchResult[]>([]);
  const [analyzingId, setAnalyzingId] = useState<string | null>(null);
  const [analyses, setAnalyses] = useState<Record<string, string>>({});
  const [aiSearching, setAiSearching] = useState(false);
  
  // PC Build Mode
  const [buildMode, setBuildMode] = useState(false);
  const [selectedComponents, setSelectedComponents] = useState<SearchResult[]>([]);

  const handleAISearch = async () => {
    if (!workspace.settings.aiProvider || workspace.settings.aiProvider === 'none') {
      toast.error('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –≤ Settings –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!');
      return;
    }

    if (!searchQuery.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è AI –ø–æ–∏—Å–∫–∞');
      return;
    }

    setAiSearching(true);
    setIsLoading(true);
    
    try {
      const aiService = new AIService({
        provider: workspace.settings.aiProvider,
        apiKey: workspace.settings.aiApiKey,
        model: workspace.settings.aiModel,
        ollamaUrl: workspace.settings.ollamaUrl,
      });

      // Ask AI to enhance search query
      const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç: "${searchQuery}"

–ó–∞–¥–∞—á–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏:
1. –õ—É—á—à–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ OLX (–ø–æ–ª—å—Å–∫–∏–π —Ä—ã–Ω–æ–∫)
2. –ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
3. –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
4. –ü—Ä–∏–º–µ—Ä–Ω—É—é —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é —Ü–µ–Ω—É –≤ –∑–ª–æ—Ç—ã—Ö (z≈Ç)

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "searchTerms": ["—Ç–µ—Ä–º–∏–Ω1", "—Ç–µ—Ä–º–∏–Ω2"],
  "specs": ["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞1", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞2"],
  "warnings": ["–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ1", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ2"],
  "priceRange": {"min": 100, "max": 300}
}`;

      const result = await aiService.chat([
        { role: 'user', content: prompt }
      ]);
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      // Try to extract JSON from response
      const jsonMatch = result.content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const aiResult = JSON.parse(jsonMatch[0]);
        
        // Update search query with AI suggestions
        const enhancedQuery = aiResult.searchTerms?.[0] || searchQuery;
        setSearchQuery(enhancedQuery);
        
        // Show AI suggestions
        toast.success(`ü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∏—Å–∫–∞—Ç—å: "${enhancedQuery}"`, {
          description: `–¶–µ–Ω–∞: ${aiResult.priceRange?.min || '?'}-${aiResult.priceRange?.max || '?'} z≈Ç`,
          duration: 5000,
        });
        
        // Auto-set price range if provided
        if (aiResult.priceRange) {
          setMinPrice(aiResult.priceRange.min.toString());
          setMaxPrice(aiResult.priceRange.max.toString());
        }
        
        // Trigger regular search with enhanced query
        setTimeout(() => handleSearch(), 500);
      } else {
        // AI didn't return JSON, just use the response as enhanced query
        toast.success('ü§ñ AI –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å');
        handleSearch();
      }
    } catch (error) {
      console.error('AI search error:', error);
      toast.error('–û—à–∏–±–∫–∞ AI –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI.');
    } finally {
      setAiSearching(false);
      setIsLoading(false);
    }
  };

  const handleSearch = async () => {
    setIsLoading(true);
    
    // Build search query for OLX
    const searchTerm = searchQuery || selectedComponent?.keywords.split(' ')[0] || 'RX 580';
    const olxSearchUrl = `https://www.olx.pl/elektronika/komputery/podzespoly/q-${encodeURIComponent(searchTerm)}`;
    
    // Simulate API call - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ OLX
    setTimeout(() => {
      let mockResults: SearchResult[] = [
        {
          id: '1',
          title: 'RX 580 8GB Sapphire Nitro+',
          price: 250,
          currency: 'z≈Ç',
          condition: 'like-new',
          location: 'Warszawa',
          url: olxSearchUrl,
          description: '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–µ–∑ –º–∞–π–Ω–∏–Ω–≥–∞, —Ç–µ—Å—Ç—ã –ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è. (Mock –¥–∞–Ω–Ω—ã–µ - –∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–∞ OLX)',
        },
        {
          id: '2',
          title: 'Gigabyte RX 580 Gaming 8GB',
          price: 280,
          currency: 'z≈Ç',
          condition: 'good',
          location: 'Krak√≥w',
          url: olxSearchUrl,
          description: '–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, —Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è. (Mock –¥–∞–Ω–Ω—ã–µ - –∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–∞ OLX)',
        },
        {
          id: '3',
          title: 'MSI RX 580 Armor 8GB',
          price: 230,
          currency: 'z≈Ç',
          condition: 'fair',
          location: 'Pozna≈Ñ',
          url: olxSearchUrl,
          description: '–ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã –Ω–∞ –∫–æ—Ä–ø—É—Å–µ. (Mock –¥–∞–Ω–Ω—ã–µ - –∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–∞ OLX)',
        },
        {
          id: '4',
          title: 'Asus RX 580 Dual 8GB',
          price: 320,
          currency: 'z≈Ç',
          condition: 'new',
          location: 'Gda≈Ñsk',
          url: olxSearchUrl,
          description: '–ù–æ–≤–∞—è –≤ —É–ø–∞–∫–æ–≤–∫–µ, –≥–∞—Ä–∞–Ω—Ç–∏—è 2 –≥–æ–¥–∞. (Mock –¥–∞–Ω–Ω—ã–µ - –∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–∞ OLX)',
        },
        {
          id: '5',
          title: 'PowerColor RX 580 Red Devil 8GB',
          price: 265,
          currency: 'z≈Ç',
          condition: 'good',
          location: 'Wroc≈Çaw',
          url: olxSearchUrl,
          description: '–ú–∞–π–Ω–∏–Ω–≥ 6 –º–µ—Å—è—Ü–µ–≤, –Ω–æ–≤—ã–µ —Ç–µ—Ä–º–æ–ø—Ä–æ–∫–ª–∞–¥–∫–∏. (Mock –¥–∞–Ω–Ω—ã–µ - –∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–∞ OLX)',
        },
      ];

      // Apply filters
      mockResults = mockResults.filter(item => {
        if (minPrice && item.price < parseInt(minPrice)) return false;
        if (maxPrice && item.price > parseInt(maxPrice)) return false;
        if (condition !== 'all' && item.condition !== condition) return false;
        if (location !== 'all' && item.location !== location) return false;
        if (searchQuery && !item.title.toLowerCase().includes(searchQuery.toLowerCase())) return false;
        return true;
      });

      // Apply sorting
      mockResults.sort((a, b) => {
        switch (sortBy) {
          case 'price-asc':
            return a.price - b.price;
          case 'price-desc':
            return b.price - a.price;
          case 'newest':
          default:
            return 0; // Keep original order for mock data
        }
      });
      
      setResults(mockResults);
      setIsLoading(false);
    }, 1500);
  };

  const handleAddToBoard = (result: SearchResult, targetColumn?: string) => {
    // Find the marketplace tab or current tab
    const marketplaceTab = workspace.tabs.find(tab => tab.template === 'marketplace');
    const targetTab = marketplaceTab || workspace.tabs[0];
    
    if (!targetTab) return;

    const firstColumn = targetTab.columns[0];
    if (!firstColumn) return;

    addCard({
      title: result.title,
      description: `## üí∞ –¶–µ–Ω–∞: ${result.price} ${result.currency}\n\n**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** ${result.condition}\n**–õ–æ–∫–∞—Ü–∏—è:** ${result.location}\n\n${result.description}\n\n[üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ OLX](${result.url})`,
      type: 'pc-component',
      priority: 'medium',
      tags: [componentType, 'olx', '–¥–ª—è-–ø–æ–∫—É–ø–∫–∏'],
      reminders: [],
      attachments: [],
      images: [],
      checklist: [
        { id: Date.now().toString(), text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º', completed: false },
        { id: (Date.now() + 1).toString(), text: '–î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ', completed: false },
        { id: (Date.now() + 2).toString(), text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä', completed: false },
      ],
      comments: [],
      columnId: firstColumn.id,
      componentType: componentType,
      condition: result.condition as ComponentCondition || 'good',
      marketPrice: result.price,
      olxLink: result.url,
    });

    toast.success('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Å–∫—É!');
  };

  const toggleComponentSelection = (result: SearchResult) => {
    setSelectedComponents(prev => {
      const isSelected = prev.some(c => c.id === result.id);
      if (isSelected) {
        return prev.filter(c => c.id !== result.id);
      } else {
        return [...prev, result];
      }
    });
  };

  const handleCreateBuild = () => {
    if (selectedComponents.length === 0) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
      return;
    }

    const marketplaceTab = workspace.tabs.find(tab => tab.template === 'marketplace');
    const targetTab = marketplaceTab || workspace.tabs[0];
    
    if (!targetTab) return;
    const firstColumn = targetTab.columns[0];
    if (!firstColumn) return;

    const totalPrice = selectedComponents.reduce((sum, c) => sum + c.price, 0);
    const componentsList = selectedComponents.map(c => 
      `- **${c.title}** - ${c.price} ${c.currency} (${CONDITION_LABELS[c.condition as keyof typeof CONDITION_LABELS]})`
    ).join('\n');

    addCard({
      title: `üñ•Ô∏è PC Build - ${selectedComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`,
      description: `## üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice} z≈Ç\n\n### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n${componentsList}\n\n### –°—Å—ã–ª–∫–∏:\n${selectedComponents.map((c, i) => `${i+1}. [${c.title}](${c.url})`).join('\n')}`,
      type: 'pc-build',
      priority: 'high',
      tags: ['pc-build', 'olx', '—Å–±–æ—Ä–∫–∞'],
      reminders: [],
      attachments: [],
      images: [],
      checklist: selectedComponents.map((c, i) => ({
        id: `${Date.now()}-${i}`,
        text: `–ö—É–ø–∏—Ç—å: ${c.title}`,
        completed: false,
      })),
      comments: [],
      columnId: firstColumn.id,
    });

    toast.success(`–°–æ–∑–¥–∞–Ω–∞ —Å–±–æ—Ä–∫–∞ –∏–∑ ${selectedComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!`);
    setSelectedComponents([]);
    setBuildMode(false);
  };

  const handleAnalyzeWithAI = async (result: SearchResult) => {
    if (!workspace.settings.aiProvider || workspace.settings.aiProvider === 'none') {
      alert('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setAnalyzingId(result.id);
    
    try {
      const aiService = new AIService({
        provider: workspace.settings.aiProvider,
        apiKey: workspace.settings.aiApiKey,
        model: workspace.settings.aiModel,
        ollamaUrl: workspace.settings.ollamaUrl,
      });

      const analysis = await analyzeOLXListing(
        {
          title: result.title,
          price: result.price,
          description: result.description,
          category: componentType,
        },
        aiService
      );

      setAnalyses(prev => ({ ...prev, [result.id]: analysis }));
    } catch (error) {
      console.error('AI analysis error:', error);
      setAnalyses(prev => ({ 
        ...prev, 
        [result.id]: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI.' 
      }));
    } finally {
      setAnalyzingId(null);
    }
  };

  const selectedComponent = PC_COMPONENTS.find(c => c.value === componentType);
  const totalBuildPrice = selectedComponents.reduce((sum, c) => sum + c.price, 0);

  // Load initial results on mount
  useEffect(() => {
    handleSearch();
  }, []); // Empty dependency array = run once on mount

  return (
    <div className="fixed inset-y-0 right-0 z-50 flex w-full max-w-4xl flex-col border-l border-border bg-background shadow-2xl">
      {/* Header */}
      <div className="flex items-center justify-between border-b border-border p-4">
        <div className="flex items-center gap-3">
          <Package className="size-5 text-primary" />
          <h2>OLX –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ü–ö</h2>
          <Badge variant="outline" className="text-xs">Ctrl+K</Badge>
          
          {/* Build Mode Toggle */}
          <Button
            variant={buildMode ? 'default' : 'outline'}
            size="sm"
            onClick={() => {
              setBuildMode(!buildMode);
              if (buildMode) setSelectedComponents([]);
            }}
          >
            <Wrench className="mr-2 size-4" />
            {buildMode ? `–†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏ (${selectedComponents.length})` : '–†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏'}
          </Button>
        </div>
        <Button variant="ghost" size="icon" onClick={onClose}>
          <X className="size-5" />
        </Button>
      </div>

      {/* Search Controls */}
      <div className="border-b border-border bg-muted/30 p-4">
        <div className="grid gap-4">
          {/* Main Search Bar */}
          <div className="flex gap-2">
            <Input
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="–ß—Ç–æ –∏—â–µ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä: RX 580 8GB"
              className="flex-1"
              onKeyDown={(e) => {
                if (e.key === 'Enter') handleSearch();
              }}
            />
            <Button 
              onClick={handleAISearch} 
              disabled={isLoading || aiSearching}
              variant="outline"
              className="border-primary/50 hover:bg-primary/10"
            >
              <Sparkles className="mr-2 size-4" />
              AI –ü–æ–∏—Å–∫
            </Button>
            <Button onClick={handleSearch} disabled={isLoading}>
              <Search className="mr-2 size-4" />
              –ü–æ–∏—Å–∫
            </Button>
          </div>

          {/* Filters Row 1: Category & Location */}
          <div className="grid grid-cols-1 gap-3 md:grid-cols-2">
            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
              <Select value={componentType} onValueChange={setComponentType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {PC_COMPONENTS.map((comp) => (
                    <SelectItem key={comp.value} value={comp.value}>
                      {comp.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">üìç –õ–æ–∫–∞—Ü–∏—è</label>
              <Select value={location} onValueChange={setLocation}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å—è –ü–æ–ª—å—à–∞</SelectItem>
                  <SelectItem value="Warszawa">Warszawa</SelectItem>
                  <SelectItem value="Krak√≥w">Krak√≥w</SelectItem>
                  <SelectItem value="Pozna≈Ñ">Pozna≈Ñ</SelectItem>
                  <SelectItem value="Gda≈Ñsk">Gda≈Ñsk</SelectItem>
                  <SelectItem value="Wroc≈Çaw">Wroc≈Çaw</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Filters Row 2: Price Range */}
          <div className="grid grid-cols-2 gap-3">
            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">–¶–µ–Ω–∞ –æ—Ç (z≈Ç)</label>
              <Input
                type="number"
                value={minPrice}
                onChange={(e) => setMinPrice(e.target.value)}
                placeholder="0"
              />
            </div>

            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">–¶–µ–Ω–∞ –¥–æ (z≈Ç)</label>
              <Input
                type="number"
                value={maxPrice}
                onChange={(e) => setMaxPrice(e.target.value)}
                placeholder="10000"
              />
            </div>
          </div>

          {/* Filters Row 3: Condition, Delivery, Seller */}
          <div className="grid grid-cols-1 gap-3 md:grid-cols-3">
            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">–°–æ—Å—Ç–æ—è–Ω–∏–µ</label>
              <Select value={condition} onValueChange={setCondition}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–õ—é–±–æ–µ</SelectItem>
                  <SelectItem value="new">–ù–æ–≤–æ–µ</SelectItem>
                  <SelectItem value="like-new">–ö–∞–∫ –Ω–æ–≤–æ–µ</SelectItem>
                  <SelectItem value="good">–•–æ—Ä–æ—à–µ–µ</SelectItem>
                  <SelectItem value="fair">–°—Ä–µ–¥–Ω–µ–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">üì¶ –î–æ—Å—Ç–∞–≤–∫–∞</label>
              <Select value={delivery} onValueChange={setDelivery}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–ù–µ –≤–∞–∂–Ω–æ</SelectItem>
                  <SelectItem value="available">–ï—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞</SelectItem>
                  <SelectItem value="pickup">–¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-xs font-medium text-muted-foreground">üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü</label>
              <Select value={sellerType} onValueChange={setSellerType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ</SelectItem>
                  <SelectItem value="private">–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ</SelectItem>
                  <SelectItem value="business">–ö–æ–º–ø–∞–Ω–∏—è</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Sort */}
          <div className="flex items-center gap-3">
            <label className="text-xs font-medium text-muted-foreground">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="w-auto">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="newest">–ù–æ–≤—ã–µ</SelectItem>
                <SelectItem value="price-asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ</SelectItem>
                <SelectItem value="price-desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Active Filters Info */}
        <div className="mt-3 flex flex-wrap gap-2">
          {minPrice && <Badge variant="secondary">–û—Ç {minPrice} z≈Ç</Badge>}
          {maxPrice && <Badge variant="secondary">–î–æ {maxPrice} z≈Ç</Badge>}
          {condition !== 'all' && <Badge variant="secondary">{CONDITION_LABELS[condition as keyof typeof CONDITION_LABELS]}</Badge>}
          {location !== 'all' && <Badge variant="secondary">üìç {location}</Badge>}
          {delivery !== 'all' && <Badge variant="secondary">üì¶ {delivery === 'available' ? '–° –¥–æ—Å—Ç–∞–≤–∫–æ–π' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}</Badge>}
          {sellerType !== 'all' && <Badge variant="secondary">üë§ {sellerType === 'private' ? '–ß–∞—Å—Ç–Ω–∏–∫' : '–ë–∏–∑–Ω–µ—Å'}</Badge>}
        </div>
      </div>

      {/* Results */}
      <ScrollArea className="flex-1 p-4">
        {isLoading ? (
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="rounded-lg border border-border bg-card p-4">
                <Skeleton className="mb-2 h-6 w-3/4" />
                <Skeleton className="mb-2 h-4 w-1/2" />
                <Skeleton className="h-4 w-full" />
              </div>
            ))}
          </div>
        ) : results.length > 0 ? (
          <div className="space-y-3">
            <p className="text-muted-foreground">
              –ù–∞–π–¥–µ–Ω–æ: {results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            </p>
            {results.map((result) => {
              const isSelected = selectedComponents.some(c => c.id === result.id);
              
              return (
              <div
                key={result.id}
                className={`group rounded-lg border p-4 transition-all ${
                  isSelected 
                    ? 'border-primary bg-primary/5 shadow-md' 
                    : 'border-border bg-card hover:border-primary hover:shadow-md'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="mb-2 flex items-center gap-2">
                      {buildMode && (
                        <Button
                          variant={isSelected ? 'default' : 'outline'}
                          size="icon"
                          className="size-6"
                          onClick={() => toggleComponentSelection(result)}
                        >
                          {isSelected ? <Check className="size-4" /> : <Plus className="size-4" />}
                        </Button>
                      )}
                      <h3>{result.title}</h3>
                    </div>
                    <div className="mb-2 flex flex-wrap items-center gap-2">
                      <Badge variant="secondary" className="bg-green-500/10 text-green-600">
                        üí∞ {result.price} {result.currency}
                      </Badge>
                      <Badge variant="outline">
                        {CONDITION_LABELS[result.condition as keyof typeof CONDITION_LABELS] || result.condition}
                      </Badge>
                      <Badge variant="outline">üìç {result.location}</Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {result.description}
                    </p>
                  </div>
                </div>

                {!buildMode && (
                <div className="mt-3 flex gap-2">
                  <Button
                    size="sm"
                    onClick={() => handleAddToBoard(result)}
                    className="flex-1"
                  >
                    <Plus className="mr-2 size-4" />
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Å–∫—É
                  </Button>
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => handleAnalyzeWithAI(result)}
                    disabled={analyzingId === result.id}
                  >
                    <Sparkles className="mr-2 size-4" />
                    {analyzingId === result.id ? '–ê–Ω–∞–ª–∏–∑...' : 'AI –∞–Ω–∞–ª–∏–∑'}
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => window.open(result.url, '_blank')}
                  >
                    <ExternalLink className="size-4" />
                  </Button>
                </div>
                )}

                {/* AI Analysis Result */}
                {analyses[result.id] && (
                  <div className="prose prose-sm dark:prose-invert mt-3 max-w-none rounded-lg border border-primary/20 bg-primary/5 p-4">
                    <div className="mb-3 flex items-center gap-2 text-sm font-semibold not-prose">
                      <Sparkles className="size-4 text-primary" />
                      AI –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–º
                    </div>
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {analyses[result.id]}
                    </ReactMarkdown>
                  </div>
                )}
              </div>
            );
            })}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-12 text-center">
            <Package className="mb-4 size-16 text-muted-foreground opacity-50" />
            <h3 className="mb-2">–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫</h3>
            <p className="text-muted-foreground">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏"
            </p>
          </div>
        )}
      </ScrollArea>

      {/* Footer */}
      <div className="border-t border-border bg-muted/30 p-4">
        {buildMode && selectedComponents.length > 0 ? (
          <div className="space-y-3">
            <div className="rounded-lg bg-primary/10 p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-semibold">–í—ã–±—Ä–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {selectedComponents.length}</p>
                  <p className="text-sm text-muted-foreground">
                    –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <span className="font-semibold text-green-600">{totalBuildPrice} z≈Ç</span>
                  </p>
                </div>
                <Button onClick={handleCreateBuild} size="lg" className="gap-2">
                  <Wrench className="size-5" />
                  –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É
                </Button>
              </div>
            </div>
            <div className="flex flex-wrap gap-2">
              {selectedComponents.map(c => (
                <Badge key={c.id} variant="secondary" className="gap-1">
                  {c.title.slice(0, 20)}... - {c.price} z≈Ç
                  <X 
                    className="size-3 cursor-pointer hover:text-destructive" 
                    onClick={() => toggleComponentSelection(c)}
                  />
                </Badge>
              ))}
            </div>
          </div>
        ) : (
          <div className="space-y-3 text-sm">
            {/* Warning about mock data */}
            <div className="rounded-lg border border-yellow-500/20 bg-yellow-500/10 p-3 text-yellow-700 dark:text-yellow-400">
              <p className="flex items-center gap-2 font-semibold">
                <TrendingUp className="size-4" />
                ‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º
              </p>
              <p className="mt-1 text-xs">
                –°–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –°—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ OLX. 
                –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OLX API (—Å–º. OLX_REAL_SEARCH_GUIDE.md)
              </p>
            </div>

            <div className="text-muted-foreground">
              <p>
                <strong>üí° –°–æ–≤–µ—Ç:</strong> {buildMode 
                  ? '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ –ü–ö' 
                  : '–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:'}
              </p>
              {!buildMode && (
                <ul className="list-inside list-disc space-y-1 pl-4">
                  <li>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ "–§–æ—Ç–æ")</li>
                  <li>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Ç–µ—Å—Ç–∞—Ö</li>
                  <li>–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ü–µ–Ω—É –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —Ä—ã–Ω–∫–æ–º</li>
                  <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</li>
                </ul>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
