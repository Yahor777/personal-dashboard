// ü§ñ AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π OLX + –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import type { OLXListing } from '../data/mockOLXData';
import { adjustScoreByPreferences } from './userPreferences';

export interface AIRecommendation {
  score: number; // 0-100
  category: 'excellent' | 'good' | 'fair' | 'poor' | 'avoid';
  reasons: string[];
  pros: string[];
  cons: string[];
  priceAnalysis: {
    isGoodPrice: boolean;
    priceLevel: '–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ' | '–¥–µ—à–µ–≤–æ' | '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞' | '–¥–æ—Ä–æ–≥–æ' | '–æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ';
    comparedToAverage: number; // –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  };
}

// üìä –°—Ä–µ–¥–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
const MARKET_PRICES: Record<string, number> = {
  // –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
  'rtx 3060': 1400,
  'rtx 3060 ti': 1800,
  'rtx 3070': 2200,
  'rtx 3080': 3000,
  'rtx 4060': 1600,
  'rtx 4070': 2800,
  'rtx 4080': 4500,
  
  // –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
  'ryzen 5 5600': 600,
  'ryzen 5 5600x': 800,
  'ryzen 7 5800x': 1200,
  'ryzen 7 5800x3d': 1500,
  'ryzen 7 7800x3d': 2000,
  'i5-12400': 700,
  'i5-13600k': 1300,
  'i7-13700k': 1800,
  
  // –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã
  'iphone 13': 2800,
  'iphone 13 pro': 3500,
  'iphone 14': 3200,
  'iphone 14 pro': 4200,
  'iphone 15': 3800,
  'samsung s23': 3000,
  'samsung s23 ultra': 4500,
  'samsung s24': 3500,
  
  // –ù–æ—É—Ç–±—É–∫–∏
  'laptop gaming': 4000,
  'macbook air': 4500,
  'macbook pro': 7000,
  
  // –ö–æ–Ω—Å–æ–ª–∏
  'playstation 5': 2500,
  'ps5': 2500,
  'xbox series x': 2300,
  'nintendo switch': 1300,
  'nintendo switch oled': 1500,
};

/**
 * üß† –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
 */
export function analyzeOffer(listing: OLXListing, allListings: OLXListing[]): AIRecommendation {
  const pros: string[] = [];
  const cons: string[] = [];
  const reasons: string[] = [];
  let score = 50; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
  
  // 1. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã
  const priceAnalysis = analyzePriceCompetitiveness(listing, allListings);
  
  if (priceAnalysis.isGoodPrice) {
    score += 20;
    pros.push(`üí∞ –í—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ (${priceAnalysis.comparedToAverage > 0 ? '+' : ''}${priceAnalysis.comparedToAverage.toFixed(0)}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π)`);
  } else if (priceAnalysis.priceLevel === '–æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ') {
    score -= 25;
    cons.push(`üí∏ –ó–∞–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ (+${priceAnalysis.comparedToAverage.toFixed(0)}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π)`);
  }
  
  // 2. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (listing.condition === 'new') {
    score += 15;
    pros.push('‚ú® –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π');
  } else {
    if (listing.price < (getMarketPrice(listing.title) * 0.7)) {
      pros.push('üì¶ –ë/–£ –Ω–æ –æ—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–∞—è —Ü–µ–Ω–∞');
    } else {
      cons.push('‚ö†Ô∏è –ë/–£ —Ç–æ–≤–∞—Ä –ø–æ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–µ');
      score -= 10;
    }
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–≤—Ü–∞
  if (listing.seller.type === 'business') {
    score += 10;
    pros.push('üè¢ –ú–∞–≥–∞–∑–∏–Ω - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è');
  } else if (listing.seller.rating && listing.seller.rating >= 4.5) {
    score += 5;
    pros.push(`‚≠ê –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (${listing.seller.rating}/5)`);
  } else if (listing.seller.rating && listing.seller.rating < 3) {
    score -= 15;
    cons.push(`‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (${listing.seller.rating}/5)`);
  }
  
  // 4. –ü—Ä–æ–º–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  if (listing.promoted) {
    score += 5;
    reasons.push('üì¢ –ü—Ä–æ–º–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è');
  }
  
  // 5. –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  const daysOld = getDaysOld(listing.publishedAt);
  if (daysOld < 2) {
    pros.push('üÜï –°–≤–µ–∂–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
    score += 5;
  } else if (daysOld > 30) {
    cons.push('‚è∞ –°—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ');
    score -= 10;
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (listing.price < getMarketPrice(listing.title) * 0.4) {
    cons.push('üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ');
    score -= 30;
    reasons.push('–°–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–æ —á—Ç–æ–±—ã –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π');
  }
  
  // 7. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–∏
  const popularCities = ['warszawa', 'krakow', 'wroclaw', 'poznan', 'gdansk'];
  if (popularCities.includes(listing.city.toLowerCase())) {
    reasons.push('üìç –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ—Ä–æ–¥ - –ª–µ–≥—á–µ –ø–æ–ª—É—á–∏—Ç—å/–æ—Å–º–æ—Ç—Ä–µ—Ç—å');
  }
  
  // üß† –û–ë–£–ß–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const adjustedScore = adjustScoreByPreferences(listing, score);
  
  // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–∑-–∑–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
  if (adjustedScore !== score) {
    const diff = adjustedScore - score;
    if (diff > 0) {
      reasons.unshift(`üéì AI –æ–±—É—á–∏–ª—Å—è: +${diff} (–ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è)`);
    } else {
      reasons.unshift(`üéì AI –æ–±—É—á–∏–ª—Å—è: ${diff} (–ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ —á—Ç–æ –≤—ã –∏–∑–±–µ–≥–∞–µ—Ç–µ)`);
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–û–ô –æ—Ü–µ–Ω–∫–∏
  let category: AIRecommendation['category'];
  if (adjustedScore >= 80) {
    category = 'excellent';
    reasons.unshift('üéØ –û–¢–õ–ò–ß–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±—Ä–∞—Ç—å!');
  } else if (adjustedScore >= 65) {
    category = 'good';
    reasons.unshift('‚úÖ –•–æ—Ä–æ—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
  } else if (adjustedScore >= 45) {
    category = 'fair';
    reasons.unshift('ü§î –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å');
  } else if (adjustedScore >= 30) {
    category = 'poor';
    reasons.unshift('‚ö†Ô∏è –°–ª–∞–±–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –∏—â–∏—Ç–µ –ª—É—á—à–µ');
  } else {
    category = 'avoid';
    reasons.unshift('üö´ –ò–ó–ë–ï–ì–ê–¢–¨ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!');
  }
  
  return {
    score: Math.max(0, Math.min(100, adjustedScore)),
    category,
    reasons,
    pros,
    cons,
    priceAnalysis,
  };
}

/**
 * üí∞ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
 */
function analyzePriceCompetitiveness(listing: OLXListing, allListings: OLXListing[]) {
  const marketPrice = getMarketPrice(listing.title);
  const actualPrice = listing.price;
  
  // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
  const comparedToAverage = ((actualPrice - marketPrice) / marketPrice) * 100;
  
  let priceLevel: AIRecommendation['priceAnalysis']['priceLevel'];
  let isGoodPrice: boolean;
  
  if (comparedToAverage < -30) {
    priceLevel = '–æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ';
    isGoodPrice = true;
  } else if (comparedToAverage < -10) {
    priceLevel = '–¥–µ—à–µ–≤–æ';
    isGoodPrice = true;
  } else if (comparedToAverage < 10) {
    priceLevel = '—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞';
    isGoodPrice = false;
  } else if (comparedToAverage < 30) {
    priceLevel = '–¥–æ—Ä–æ–≥–æ';
    isGoodPrice = false;
  } else {
    priceLevel = '–æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ';
    isGoodPrice = false;
  }
  
  return {
    isGoodPrice,
    priceLevel,
    comparedToAverage,
  };
}

/**
 * üíµ –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
 */
function getMarketPrice(title: string): number {
  const titleLower = title.toLowerCase();
  
  // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ —Ü–µ–Ω
  for (const [key, price] of Object.entries(MARKET_PRICES)) {
    if (titleLower.includes(key)) {
      return price;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (titleLower.includes('rtx') || titleLower.includes('video') || titleLower.includes('gpu')) {
    return 2000;
  }
  if (titleLower.includes('ryzen') || titleLower.includes('intel') || titleLower.includes('cpu')) {
    return 1000;
  }
  if (titleLower.includes('iphone')) {
    return 3500;
  }
  if (titleLower.includes('samsung')) {
    return 3000;
  }
  if (titleLower.includes('laptop') || titleLower.includes('macbook')) {
    return 4500;
  }
  if (titleLower.includes('ps5') || titleLower.includes('playstation')) {
    return 2500;
  }
  if (titleLower.includes('switch')) {
    return 1400;
  }
  
  // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  return 1500;
}

/**
 * üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
 */
function getDaysOld(publishedAt: string): number {
  const publishDate = new Date(publishedAt);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - publishDate.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
}

/**
 * üèÜ –ü–æ–ª—É—á–∏—Ç—å –¢–û–ü-3 –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
export function getTopOffers(listings: OLXListing[]): OLXListing[] {
  const analyzed = listings.map(listing => ({
    listing,
    recommendation: analyzeOffer(listing, listings),
  }));
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
  analyzed.sort((a, b) => b.recommendation.score - a.recommendation.score);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3
  return analyzed.slice(0, 3).map(item => item.listing);
}

/**
 * ‚ö†Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å
 */
export function getOffersToAvoid(listings: OLXListing[]): OLXListing[] {
  const analyzed = listings.map(listing => ({
    listing,
    recommendation: analyzeOffer(listing, listings),
  }));
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è 'avoid' –∏–ª–∏ 'poor'
  const toAvoid = analyzed.filter(item => 
    item.recommendation.category === 'avoid' || item.recommendation.score < 40
  );
  
  return toAvoid.map(item => item.listing);
}
